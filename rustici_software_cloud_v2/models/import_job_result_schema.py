# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ImportJobResultSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, job_id=None, status=None, message=None, import_result=None):
        """
        ImportJobResultSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'job_id': 'str',
            'status': 'str',
            'message': 'str',
            'import_result': 'ImportResultSchema'
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'status': 'status',
            'message': 'message',
            'import_result': 'importResult'
        }

        self._job_id = job_id
        self._status = status
        self._message = message
        self._import_result = import_result

    @property
    def job_id(self):
        """
        Gets the job_id of this ImportJobResultSchema.


        :return: The job_id of this ImportJobResultSchema.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ImportJobResultSchema.


        :param job_id: The job_id of this ImportJobResultSchema.
        :type: str
        """

        self._job_id = job_id

    @property
    def status(self):
        """
        Gets the status of this ImportJobResultSchema.


        :return: The status of this ImportJobResultSchema.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ImportJobResultSchema.


        :param status: The status of this ImportJobResultSchema.
        :type: str
        """
        allowed_values = ["RUNNING", "COMPLETE", "ERROR"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self):
        """
        Gets the message of this ImportJobResultSchema.


        :return: The message of this ImportJobResultSchema.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ImportJobResultSchema.


        :param message: The message of this ImportJobResultSchema.
        :type: str
        """

        self._message = message

    @property
    def import_result(self):
        """
        Gets the import_result of this ImportJobResultSchema.


        :return: The import_result of this ImportJobResultSchema.
        :rtype: ImportResultSchema
        """
        return self._import_result

    @import_result.setter
    def import_result(self, import_result):
        """
        Sets the import_result of this ImportJobResultSchema.


        :param import_result: The import_result of this ImportJobResultSchema.
        :type: ImportResultSchema
        """

        self._import_result = import_result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
