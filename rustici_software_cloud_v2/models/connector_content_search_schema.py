# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectorContentSearchSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_id': 'str',
        'search': 'str',
        'since': 'datetime',
        'context': 'ConnectorContentSearchContextSchema',
        'more': 'str'
    }

    attribute_map = {
        'connector_id': 'connectorId',
        'search': 'search',
        'since': 'since',
        'context': 'context',
        'more': 'more'
    }

    def __init__(self, connector_id=None, search=None, since=None, context=None, more=None):  # noqa: E501
        """ConnectorContentSearchSchema - a model defined in Swagger"""  # noqa: E501

        self._connector_id = None
        self._search = None
        self._since = None
        self._context = None
        self._more = None
        self.discriminator = None

        if connector_id is not None:
            self.connector_id = connector_id
        if search is not None:
            self.search = search
        if since is not None:
            self.since = since
        if context is not None:
            self.context = context
        if more is not None:
            self.more = more

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorContentSearchSchema.  # noqa: E501

        only search using the specified connector  # noqa: E501

        :return: The connector_id of this ConnectorContentSearchSchema.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorContentSearchSchema.

        only search using the specified connector  # noqa: E501

        :param connector_id: The connector_id of this ConnectorContentSearchSchema.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def search(self):
        """Gets the search of this ConnectorContentSearchSchema.  # noqa: E501


        :return: The search of this ConnectorContentSearchSchema.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this ConnectorContentSearchSchema.


        :param search: The search of this ConnectorContentSearchSchema.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def since(self):
        """Gets the since of this ConnectorContentSearchSchema.  # noqa: E501

        Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.  # noqa: E501

        :return: The since of this ConnectorContentSearchSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this ConnectorContentSearchSchema.

        Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.  # noqa: E501

        :param since: The since of this ConnectorContentSearchSchema.  # noqa: E501
        :type: datetime
        """

        self._since = since

    @property
    def context(self):
        """Gets the context of this ConnectorContentSearchSchema.  # noqa: E501


        :return: The context of this ConnectorContentSearchSchema.  # noqa: E501
        :rtype: ConnectorContentSearchContextSchema
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConnectorContentSearchSchema.


        :param context: The context of this ConnectorContentSearchSchema.  # noqa: E501
        :type: ConnectorContentSearchContextSchema
        """

        self._context = context

    @property
    def more(self):
        """Gets the more of this ConnectorContentSearchSchema.  # noqa: E501

        Token for getting the next set of results, from the prior set of results.  # noqa: E501

        :return: The more of this ConnectorContentSearchSchema.  # noqa: E501
        :rtype: str
        """
        return self._more

    @more.setter
    def more(self, more):
        """Sets the more of this ConnectorContentSearchSchema.

        Token for getting the next set of results, from the prior set of results.  # noqa: E501

        :param more: The more of this ConnectorContentSearchSchema.  # noqa: E501
        :type: str
        """

        self._more = more

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorContentSearchSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorContentSearchSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
