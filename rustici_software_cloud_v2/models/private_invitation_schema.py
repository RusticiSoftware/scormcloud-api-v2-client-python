# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PrivateInvitationSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, course_id=None, allow_launch=None, invitation_email=None, create_date=None, updated=None, post_back=None, expiration_date=None, registration_count=None):
        """
        PrivateInvitationSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'course_id': 'str',
            'allow_launch': 'bool',
            'invitation_email': 'InvitationEmailSchema',
            'create_date': 'datetime',
            'updated': 'datetime',
            'post_back': 'PostBackSchema',
            'expiration_date': 'datetime',
            'registration_count': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'course_id': 'courseId',
            'allow_launch': 'allowLaunch',
            'invitation_email': 'invitationEmail',
            'create_date': 'createDate',
            'updated': 'updated',
            'post_back': 'postBack',
            'expiration_date': 'expirationDate',
            'registration_count': 'registrationCount'
        }

        self._id = id
        self._course_id = course_id
        self._allow_launch = allow_launch
        self._invitation_email = invitation_email
        self._create_date = create_date
        self._updated = updated
        self._post_back = post_back
        self._expiration_date = expiration_date
        self._registration_count = registration_count

    @property
    def id(self):
        """
        Gets the id of this PrivateInvitationSchema.
        The invitationId for this invitation.

        :return: The id of this PrivateInvitationSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PrivateInvitationSchema.
        The invitationId for this invitation.

        :param id: The id of this PrivateInvitationSchema.
        :type: str
        """

        self._id = id

    @property
    def course_id(self):
        """
        Gets the course_id of this PrivateInvitationSchema.
        Course Id for this Invitation.

        :return: The course_id of this PrivateInvitationSchema.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """
        Sets the course_id of this PrivateInvitationSchema.
        Course Id for this Invitation.

        :param course_id: The course_id of this PrivateInvitationSchema.
        :type: str
        """

        self._course_id = course_id

    @property
    def allow_launch(self):
        """
        Gets the allow_launch of this PrivateInvitationSchema.
        If true, then new registrations can be created for this dispatch.

        :return: The allow_launch of this PrivateInvitationSchema.
        :rtype: bool
        """
        return self._allow_launch

    @allow_launch.setter
    def allow_launch(self, allow_launch):
        """
        Sets the allow_launch of this PrivateInvitationSchema.
        If true, then new registrations can be created for this dispatch.

        :param allow_launch: The allow_launch of this PrivateInvitationSchema.
        :type: bool
        """

        self._allow_launch = allow_launch

    @property
    def invitation_email(self):
        """
        Gets the invitation_email of this PrivateInvitationSchema.

        :return: The invitation_email of this PrivateInvitationSchema.
        :rtype: InvitationEmailSchema
        """
        return self._invitation_email

    @invitation_email.setter
    def invitation_email(self, invitation_email):
        """
        Sets the invitation_email of this PrivateInvitationSchema.

        :param invitation_email: The invitation_email of this PrivateInvitationSchema.
        :type: InvitationEmailSchema
        """

        self._invitation_email = invitation_email

    @property
    def create_date(self):
        """
        Gets the create_date of this PrivateInvitationSchema.
        The create date for the invitation

        :return: The create_date of this PrivateInvitationSchema.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this PrivateInvitationSchema.
        The create date for the invitation

        :param create_date: The create_date of this PrivateInvitationSchema.
        :type: datetime
        """

        self._create_date = create_date

    @property
    def updated(self):
        """
        Gets the updated of this PrivateInvitationSchema.

        :return: The updated of this PrivateInvitationSchema.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this PrivateInvitationSchema.

        :param updated: The updated of this PrivateInvitationSchema.
        :type: datetime
        """

        self._updated = updated

    @property
    def post_back(self):
        """
        Gets the post_back of this PrivateInvitationSchema.
        Specifies a URL for which to post activity and status data in real time as the course is completed

        :return: The post_back of this PrivateInvitationSchema.
        :rtype: PostBackSchema
        """
        return self._post_back

    @post_back.setter
    def post_back(self, post_back):
        """
        Sets the post_back of this PrivateInvitationSchema.
        Specifies a URL for which to post activity and status data in real time as the course is completed

        :param post_back: The post_back of this PrivateInvitationSchema.
        :type: PostBackSchema
        """

        self._post_back = post_back

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this PrivateInvitationSchema.
        The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).

        :return: The expiration_date of this PrivateInvitationSchema.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this PrivateInvitationSchema.
        The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).

        :param expiration_date: The expiration_date of this PrivateInvitationSchema.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def registration_count(self):
        """
        Gets the registration_count of this PrivateInvitationSchema.
        The count of registrations for this invitation

        :return: The registration_count of this PrivateInvitationSchema.
        :rtype: int
        """
        return self._registration_count

    @registration_count.setter
    def registration_count(self, registration_count):
        """
        Sets the registration_count of this PrivateInvitationSchema.
        The count of registrations for this invitation

        :param registration_count: The registration_count of this PrivateInvitationSchema.
        :type: int
        """

        self._registration_count = registration_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PrivateInvitationSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
