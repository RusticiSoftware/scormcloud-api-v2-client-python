# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rustici_software_cloud_v2.models.comment_schema import CommentSchema  # noqa: F401,E501
from rustici_software_cloud_v2.models.learner_preference_schema import LearnerPreferenceSchema  # noqa: F401,E501
from rustici_software_cloud_v2.models.runtime_interaction_schema import RuntimeInteractionSchema  # noqa: F401,E501
from rustici_software_cloud_v2.models.runtime_objective_schema import RuntimeObjectiveSchema  # noqa: F401,E501


class RuntimeSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completion_status': 'str',
        'credit': 'str',
        'entry': 'str',
        'exit': 'str',
        'learner_preference': 'LearnerPreferenceSchema',
        'location': 'str',
        'mode': 'str',
        'progress_measure': 'str',
        'score_scaled': 'str',
        'score_raw': 'str',
        'score_min': 'str',
        'score_max': 'str',
        'total_time': 'str',
        'time_tracked': 'str',
        'runtime_success_status': 'str',
        'suspend_data': 'str',
        'learner_comments': 'list[CommentSchema]',
        'lms_comments': 'list[CommentSchema]',
        'runtime_interactions': 'list[RuntimeInteractionSchema]',
        'runtime_objectives': 'list[RuntimeObjectiveSchema]'
    }

    attribute_map = {
        'completion_status': 'completionStatus',
        'credit': 'credit',
        'entry': 'entry',
        'exit': 'exit',
        'learner_preference': 'learnerPreference',
        'location': 'location',
        'mode': 'mode',
        'progress_measure': 'progressMeasure',
        'score_scaled': 'scoreScaled',
        'score_raw': 'scoreRaw',
        'score_min': 'scoreMin',
        'score_max': 'scoreMax',
        'total_time': 'totalTime',
        'time_tracked': 'timeTracked',
        'runtime_success_status': 'runtimeSuccessStatus',
        'suspend_data': 'suspendData',
        'learner_comments': 'learnerComments',
        'lms_comments': 'lmsComments',
        'runtime_interactions': 'runtimeInteractions',
        'runtime_objectives': 'runtimeObjectives'
    }

    def __init__(self, completion_status=None, credit=None, entry=None, exit=None, learner_preference=None, location=None, mode=None, progress_measure=None, score_scaled=None, score_raw=None, score_min=None, score_max=None, total_time=None, time_tracked=None, runtime_success_status='UNKNOWN', suspend_data=None, learner_comments=None, lms_comments=None, runtime_interactions=None, runtime_objectives=None):  # noqa: E501
        """RuntimeSchema - a model defined in Swagger"""  # noqa: E501

        self._completion_status = None
        self._credit = None
        self._entry = None
        self._exit = None
        self._learner_preference = None
        self._location = None
        self._mode = None
        self._progress_measure = None
        self._score_scaled = None
        self._score_raw = None
        self._score_min = None
        self._score_max = None
        self._total_time = None
        self._time_tracked = None
        self._runtime_success_status = None
        self._suspend_data = None
        self._learner_comments = None
        self._lms_comments = None
        self._runtime_interactions = None
        self._runtime_objectives = None
        self.discriminator = None

        if completion_status is not None:
            self.completion_status = completion_status
        if credit is not None:
            self.credit = credit
        if entry is not None:
            self.entry = entry
        if exit is not None:
            self.exit = exit
        if learner_preference is not None:
            self.learner_preference = learner_preference
        if location is not None:
            self.location = location
        if mode is not None:
            self.mode = mode
        if progress_measure is not None:
            self.progress_measure = progress_measure
        if score_scaled is not None:
            self.score_scaled = score_scaled
        if score_raw is not None:
            self.score_raw = score_raw
        if score_min is not None:
            self.score_min = score_min
        if score_max is not None:
            self.score_max = score_max
        if total_time is not None:
            self.total_time = total_time
        if time_tracked is not None:
            self.time_tracked = time_tracked
        if runtime_success_status is not None:
            self.runtime_success_status = runtime_success_status
        if suspend_data is not None:
            self.suspend_data = suspend_data
        if learner_comments is not None:
            self.learner_comments = learner_comments
        if lms_comments is not None:
            self.lms_comments = lms_comments
        if runtime_interactions is not None:
            self.runtime_interactions = runtime_interactions
        if runtime_objectives is not None:
            self.runtime_objectives = runtime_objectives

    @property
    def completion_status(self):
        """Gets the completion_status of this RuntimeSchema.  # noqa: E501


        :return: The completion_status of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._completion_status

    @completion_status.setter
    def completion_status(self, completion_status):
        """Sets the completion_status of this RuntimeSchema.


        :param completion_status: The completion_status of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._completion_status = completion_status

    @property
    def credit(self):
        """Gets the credit of this RuntimeSchema.  # noqa: E501


        :return: The credit of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this RuntimeSchema.


        :param credit: The credit of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._credit = credit

    @property
    def entry(self):
        """Gets the entry of this RuntimeSchema.  # noqa: E501


        :return: The entry of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this RuntimeSchema.


        :param entry: The entry of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._entry = entry

    @property
    def exit(self):
        """Gets the exit of this RuntimeSchema.  # noqa: E501


        :return: The exit of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._exit

    @exit.setter
    def exit(self, exit):
        """Sets the exit of this RuntimeSchema.


        :param exit: The exit of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._exit = exit

    @property
    def learner_preference(self):
        """Gets the learner_preference of this RuntimeSchema.  # noqa: E501


        :return: The learner_preference of this RuntimeSchema.  # noqa: E501
        :rtype: LearnerPreferenceSchema
        """
        return self._learner_preference

    @learner_preference.setter
    def learner_preference(self, learner_preference):
        """Sets the learner_preference of this RuntimeSchema.


        :param learner_preference: The learner_preference of this RuntimeSchema.  # noqa: E501
        :type: LearnerPreferenceSchema
        """

        self._learner_preference = learner_preference

    @property
    def location(self):
        """Gets the location of this RuntimeSchema.  # noqa: E501


        :return: The location of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RuntimeSchema.


        :param location: The location of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mode(self):
        """Gets the mode of this RuntimeSchema.  # noqa: E501


        :return: The mode of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RuntimeSchema.


        :param mode: The mode of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def progress_measure(self):
        """Gets the progress_measure of this RuntimeSchema.  # noqa: E501


        :return: The progress_measure of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._progress_measure

    @progress_measure.setter
    def progress_measure(self, progress_measure):
        """Sets the progress_measure of this RuntimeSchema.


        :param progress_measure: The progress_measure of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._progress_measure = progress_measure

    @property
    def score_scaled(self):
        """Gets the score_scaled of this RuntimeSchema.  # noqa: E501


        :return: The score_scaled of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._score_scaled

    @score_scaled.setter
    def score_scaled(self, score_scaled):
        """Sets the score_scaled of this RuntimeSchema.


        :param score_scaled: The score_scaled of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._score_scaled = score_scaled

    @property
    def score_raw(self):
        """Gets the score_raw of this RuntimeSchema.  # noqa: E501


        :return: The score_raw of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._score_raw

    @score_raw.setter
    def score_raw(self, score_raw):
        """Sets the score_raw of this RuntimeSchema.


        :param score_raw: The score_raw of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._score_raw = score_raw

    @property
    def score_min(self):
        """Gets the score_min of this RuntimeSchema.  # noqa: E501


        :return: The score_min of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._score_min

    @score_min.setter
    def score_min(self, score_min):
        """Sets the score_min of this RuntimeSchema.


        :param score_min: The score_min of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._score_min = score_min

    @property
    def score_max(self):
        """Gets the score_max of this RuntimeSchema.  # noqa: E501


        :return: The score_max of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._score_max

    @score_max.setter
    def score_max(self, score_max):
        """Sets the score_max of this RuntimeSchema.


        :param score_max: The score_max of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._score_max = score_max

    @property
    def total_time(self):
        """Gets the total_time of this RuntimeSchema.  # noqa: E501


        :return: The total_time of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this RuntimeSchema.


        :param total_time: The total_time of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._total_time = total_time

    @property
    def time_tracked(self):
        """Gets the time_tracked of this RuntimeSchema.  # noqa: E501


        :return: The time_tracked of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._time_tracked

    @time_tracked.setter
    def time_tracked(self, time_tracked):
        """Sets the time_tracked of this RuntimeSchema.


        :param time_tracked: The time_tracked of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._time_tracked = time_tracked

    @property
    def runtime_success_status(self):
        """Gets the runtime_success_status of this RuntimeSchema.  # noqa: E501


        :return: The runtime_success_status of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._runtime_success_status

    @runtime_success_status.setter
    def runtime_success_status(self, runtime_success_status):
        """Sets the runtime_success_status of this RuntimeSchema.


        :param runtime_success_status: The runtime_success_status of this RuntimeSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "PASSED", "FAILED"]  # noqa: E501
        if runtime_success_status not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_success_status` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_success_status, allowed_values)
            )

        self._runtime_success_status = runtime_success_status

    @property
    def suspend_data(self):
        """Gets the suspend_data of this RuntimeSchema.  # noqa: E501


        :return: The suspend_data of this RuntimeSchema.  # noqa: E501
        :rtype: str
        """
        return self._suspend_data

    @suspend_data.setter
    def suspend_data(self, suspend_data):
        """Sets the suspend_data of this RuntimeSchema.


        :param suspend_data: The suspend_data of this RuntimeSchema.  # noqa: E501
        :type: str
        """

        self._suspend_data = suspend_data

    @property
    def learner_comments(self):
        """Gets the learner_comments of this RuntimeSchema.  # noqa: E501


        :return: The learner_comments of this RuntimeSchema.  # noqa: E501
        :rtype: list[CommentSchema]
        """
        return self._learner_comments

    @learner_comments.setter
    def learner_comments(self, learner_comments):
        """Sets the learner_comments of this RuntimeSchema.


        :param learner_comments: The learner_comments of this RuntimeSchema.  # noqa: E501
        :type: list[CommentSchema]
        """

        self._learner_comments = learner_comments

    @property
    def lms_comments(self):
        """Gets the lms_comments of this RuntimeSchema.  # noqa: E501


        :return: The lms_comments of this RuntimeSchema.  # noqa: E501
        :rtype: list[CommentSchema]
        """
        return self._lms_comments

    @lms_comments.setter
    def lms_comments(self, lms_comments):
        """Sets the lms_comments of this RuntimeSchema.


        :param lms_comments: The lms_comments of this RuntimeSchema.  # noqa: E501
        :type: list[CommentSchema]
        """

        self._lms_comments = lms_comments

    @property
    def runtime_interactions(self):
        """Gets the runtime_interactions of this RuntimeSchema.  # noqa: E501


        :return: The runtime_interactions of this RuntimeSchema.  # noqa: E501
        :rtype: list[RuntimeInteractionSchema]
        """
        return self._runtime_interactions

    @runtime_interactions.setter
    def runtime_interactions(self, runtime_interactions):
        """Sets the runtime_interactions of this RuntimeSchema.


        :param runtime_interactions: The runtime_interactions of this RuntimeSchema.  # noqa: E501
        :type: list[RuntimeInteractionSchema]
        """

        self._runtime_interactions = runtime_interactions

    @property
    def runtime_objectives(self):
        """Gets the runtime_objectives of this RuntimeSchema.  # noqa: E501


        :return: The runtime_objectives of this RuntimeSchema.  # noqa: E501
        :rtype: list[RuntimeObjectiveSchema]
        """
        return self._runtime_objectives

    @runtime_objectives.setter
    def runtime_objectives(self, runtime_objectives):
        """Sets the runtime_objectives of this RuntimeSchema.


        :param runtime_objectives: The runtime_objectives of this RuntimeSchema.  # noqa: E501
        :type: list[RuntimeObjectiveSchema]
        """

        self._runtime_objectives = runtime_objectives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
