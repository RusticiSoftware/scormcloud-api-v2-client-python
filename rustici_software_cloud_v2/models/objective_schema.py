# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ObjectiveSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, primary=None, score=None, score_max=None, score_min=None, score_raw=None, previous_score_scaled=None, first_score_scaled=None, progress_measure=None, first_success_time_stamp=None, objective_completion='UNKNOWN', objective_success='UNKNOWN', previous_objective_success='UNKNOWN'):
        """
        ObjectiveSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'primary': 'bool',
            'score': 'ScoreSchema',
            'score_max': 'float',
            'score_min': 'float',
            'score_raw': 'float',
            'previous_score_scaled': 'float',
            'first_score_scaled': 'float',
            'progress_measure': 'float',
            'first_success_time_stamp': 'str',
            'objective_completion': 'str',
            'objective_success': 'str',
            'previous_objective_success': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'primary': 'primary',
            'score': 'score',
            'score_max': 'scoreMax',
            'score_min': 'scoreMin',
            'score_raw': 'scoreRaw',
            'previous_score_scaled': 'previousScoreScaled',
            'first_score_scaled': 'firstScoreScaled',
            'progress_measure': 'progressMeasure',
            'first_success_time_stamp': 'firstSuccessTimeStamp',
            'objective_completion': 'objectiveCompletion',
            'objective_success': 'objectiveSuccess',
            'previous_objective_success': 'previousObjectiveSuccess'
        }

        self._id = id
        self._primary = primary
        self._score = score
        self._score_max = score_max
        self._score_min = score_min
        self._score_raw = score_raw
        self._previous_score_scaled = previous_score_scaled
        self._first_score_scaled = first_score_scaled
        self._progress_measure = progress_measure
        self._first_success_time_stamp = first_success_time_stamp
        self._objective_completion = objective_completion
        self._objective_success = objective_success
        self._previous_objective_success = previous_objective_success

    @property
    def id(self):
        """
        Gets the id of this ObjectiveSchema.

        :return: The id of this ObjectiveSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ObjectiveSchema.

        :param id: The id of this ObjectiveSchema.
        :type: str
        """

        self._id = id

    @property
    def primary(self):
        """
        Gets the primary of this ObjectiveSchema.

        :return: The primary of this ObjectiveSchema.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """
        Sets the primary of this ObjectiveSchema.

        :param primary: The primary of this ObjectiveSchema.
        :type: bool
        """

        self._primary = primary

    @property
    def score(self):
        """
        Gets the score of this ObjectiveSchema.

        :return: The score of this ObjectiveSchema.
        :rtype: ScoreSchema
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this ObjectiveSchema.

        :param score: The score of this ObjectiveSchema.
        :type: ScoreSchema
        """

        self._score = score

    @property
    def score_max(self):
        """
        Gets the score_max of this ObjectiveSchema.

        :return: The score_max of this ObjectiveSchema.
        :rtype: float
        """
        return self._score_max

    @score_max.setter
    def score_max(self, score_max):
        """
        Sets the score_max of this ObjectiveSchema.

        :param score_max: The score_max of this ObjectiveSchema.
        :type: float
        """

        self._score_max = score_max

    @property
    def score_min(self):
        """
        Gets the score_min of this ObjectiveSchema.

        :return: The score_min of this ObjectiveSchema.
        :rtype: float
        """
        return self._score_min

    @score_min.setter
    def score_min(self, score_min):
        """
        Sets the score_min of this ObjectiveSchema.

        :param score_min: The score_min of this ObjectiveSchema.
        :type: float
        """

        self._score_min = score_min

    @property
    def score_raw(self):
        """
        Gets the score_raw of this ObjectiveSchema.

        :return: The score_raw of this ObjectiveSchema.
        :rtype: float
        """
        return self._score_raw

    @score_raw.setter
    def score_raw(self, score_raw):
        """
        Sets the score_raw of this ObjectiveSchema.

        :param score_raw: The score_raw of this ObjectiveSchema.
        :type: float
        """

        self._score_raw = score_raw

    @property
    def previous_score_scaled(self):
        """
        Gets the previous_score_scaled of this ObjectiveSchema.

        :return: The previous_score_scaled of this ObjectiveSchema.
        :rtype: float
        """
        return self._previous_score_scaled

    @previous_score_scaled.setter
    def previous_score_scaled(self, previous_score_scaled):
        """
        Sets the previous_score_scaled of this ObjectiveSchema.

        :param previous_score_scaled: The previous_score_scaled of this ObjectiveSchema.
        :type: float
        """

        self._previous_score_scaled = previous_score_scaled

    @property
    def first_score_scaled(self):
        """
        Gets the first_score_scaled of this ObjectiveSchema.

        :return: The first_score_scaled of this ObjectiveSchema.
        :rtype: float
        """
        return self._first_score_scaled

    @first_score_scaled.setter
    def first_score_scaled(self, first_score_scaled):
        """
        Sets the first_score_scaled of this ObjectiveSchema.

        :param first_score_scaled: The first_score_scaled of this ObjectiveSchema.
        :type: float
        """

        self._first_score_scaled = first_score_scaled

    @property
    def progress_measure(self):
        """
        Gets the progress_measure of this ObjectiveSchema.

        :return: The progress_measure of this ObjectiveSchema.
        :rtype: float
        """
        return self._progress_measure

    @progress_measure.setter
    def progress_measure(self, progress_measure):
        """
        Sets the progress_measure of this ObjectiveSchema.

        :param progress_measure: The progress_measure of this ObjectiveSchema.
        :type: float
        """

        self._progress_measure = progress_measure

    @property
    def first_success_time_stamp(self):
        """
        Gets the first_success_time_stamp of this ObjectiveSchema.

        :return: The first_success_time_stamp of this ObjectiveSchema.
        :rtype: str
        """
        return self._first_success_time_stamp

    @first_success_time_stamp.setter
    def first_success_time_stamp(self, first_success_time_stamp):
        """
        Sets the first_success_time_stamp of this ObjectiveSchema.

        :param first_success_time_stamp: The first_success_time_stamp of this ObjectiveSchema.
        :type: str
        """

        self._first_success_time_stamp = first_success_time_stamp

    @property
    def objective_completion(self):
        """
        Gets the objective_completion of this ObjectiveSchema.

        :return: The objective_completion of this ObjectiveSchema.
        :rtype: str
        """
        return self._objective_completion

    @objective_completion.setter
    def objective_completion(self, objective_completion):
        """
        Sets the objective_completion of this ObjectiveSchema.

        :param objective_completion: The objective_completion of this ObjectiveSchema.
        :type: str
        """
        allowed_values = ["UNKNOWN", "COMPLETED", "INCOMPLETE"]
        if objective_completion not in allowed_values:
            raise ValueError(
                "Invalid value for `objective_completion` ({0}), must be one of {1}"
                .format(objective_completion, allowed_values)
            )

        self._objective_completion = objective_completion

    @property
    def objective_success(self):
        """
        Gets the objective_success of this ObjectiveSchema.

        :return: The objective_success of this ObjectiveSchema.
        :rtype: str
        """
        return self._objective_success

    @objective_success.setter
    def objective_success(self, objective_success):
        """
        Sets the objective_success of this ObjectiveSchema.

        :param objective_success: The objective_success of this ObjectiveSchema.
        :type: str
        """
        allowed_values = ["UNKNOWN", "PASSED", "FAILED"]
        if objective_success not in allowed_values:
            raise ValueError(
                "Invalid value for `objective_success` ({0}), must be one of {1}"
                .format(objective_success, allowed_values)
            )

        self._objective_success = objective_success

    @property
    def previous_objective_success(self):
        """
        Gets the previous_objective_success of this ObjectiveSchema.

        :return: The previous_objective_success of this ObjectiveSchema.
        :rtype: str
        """
        return self._previous_objective_success

    @previous_objective_success.setter
    def previous_objective_success(self, previous_objective_success):
        """
        Sets the previous_objective_success of this ObjectiveSchema.

        :param previous_objective_success: The previous_objective_success of this ObjectiveSchema.
        :type: str
        """
        allowed_values = ["UNKNOWN", "PASSED", "FAILED"]
        if previous_objective_success not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_objective_success` ({0}), must be one of {1}"
                .format(previous_objective_success, allowed_values)
            )

        self._previous_objective_success = previous_objective_success

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ObjectiveSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
