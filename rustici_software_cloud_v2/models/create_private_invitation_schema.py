# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreatePrivateInvitationSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, course_id=None, creating_user_email=None, invitation_email=None, post_back=None, expiration_date=None, tags=None):
        """
        CreatePrivateInvitationSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'course_id': 'str',
            'creating_user_email': 'str',
            'invitation_email': 'InvitationEmailSchema',
            'post_back': 'PostBackSchema',
            'expiration_date': 'datetime',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'course_id': 'courseId',
            'creating_user_email': 'creatingUserEmail',
            'invitation_email': 'invitationEmail',
            'post_back': 'postBack',
            'expiration_date': 'expirationDate',
            'tags': 'tags'
        }

        self._course_id = course_id
        self._creating_user_email = creating_user_email
        self._invitation_email = invitation_email
        self._post_back = post_back
        self._expiration_date = expiration_date
        self._tags = tags

    @property
    def course_id(self):
        """
        Gets the course_id of this CreatePrivateInvitationSchema.
        The id of the course for which to create an invitation.

        :return: The course_id of this CreatePrivateInvitationSchema.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """
        Sets the course_id of this CreatePrivateInvitationSchema.
        The id of the course for which to create an invitation.

        :param course_id: The course_id of this CreatePrivateInvitationSchema.
        :type: str
        """
        if course_id is None:
            raise ValueError("Invalid value for `course_id`, must not be `None`")

        self._course_id = course_id

    @property
    def creating_user_email(self):
        """
        Gets the creating_user_email of this CreatePrivateInvitationSchema.
        The email of the user who is creating the invitation.

        :return: The creating_user_email of this CreatePrivateInvitationSchema.
        :rtype: str
        """
        return self._creating_user_email

    @creating_user_email.setter
    def creating_user_email(self, creating_user_email):
        """
        Sets the creating_user_email of this CreatePrivateInvitationSchema.
        The email of the user who is creating the invitation.

        :param creating_user_email: The creating_user_email of this CreatePrivateInvitationSchema.
        :type: str
        """
        if creating_user_email is None:
            raise ValueError("Invalid value for `creating_user_email`, must not be `None`")

        self._creating_user_email = creating_user_email

    @property
    def invitation_email(self):
        """
        Gets the invitation_email of this CreatePrivateInvitationSchema.

        :return: The invitation_email of this CreatePrivateInvitationSchema.
        :rtype: InvitationEmailSchema
        """
        return self._invitation_email

    @invitation_email.setter
    def invitation_email(self, invitation_email):
        """
        Sets the invitation_email of this CreatePrivateInvitationSchema.

        :param invitation_email: The invitation_email of this CreatePrivateInvitationSchema.
        :type: InvitationEmailSchema
        """
        if invitation_email is None:
            raise ValueError("Invalid value for `invitation_email`, must not be `None`")

        self._invitation_email = invitation_email

    @property
    def post_back(self):
        """
        Gets the post_back of this CreatePrivateInvitationSchema.
        Specifies a URL for which to post activity and status data in real time as the course is completed

        :return: The post_back of this CreatePrivateInvitationSchema.
        :rtype: PostBackSchema
        """
        return self._post_back

    @post_back.setter
    def post_back(self, post_back):
        """
        Sets the post_back of this CreatePrivateInvitationSchema.
        Specifies a URL for which to post activity and status data in real time as the course is completed

        :param post_back: The post_back of this CreatePrivateInvitationSchema.
        :type: PostBackSchema
        """

        self._post_back = post_back

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this CreatePrivateInvitationSchema.
        The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).

        :return: The expiration_date of this CreatePrivateInvitationSchema.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this CreatePrivateInvitationSchema.
        The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).

        :param expiration_date: The expiration_date of this CreatePrivateInvitationSchema.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def tags(self):
        """
        Gets the tags of this CreatePrivateInvitationSchema.
        Optional tags to be applied to this invitation.

        :return: The tags of this CreatePrivateInvitationSchema.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CreatePrivateInvitationSchema.
        Optional tags to be applied to this invitation.

        :param tags: The tags of this CreatePrivateInvitationSchema.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreatePrivateInvitationSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
