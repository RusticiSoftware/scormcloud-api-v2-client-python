# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class XapiAgentGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, object_type=None, name=None, mbox=None, mbox_sha1sum=None, openid=None, account=None, member=None):
        """
        XapiAgentGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'object_type': 'str',
            'name': 'str',
            'mbox': 'str',
            'mbox_sha1sum': 'str',
            'openid': 'str',
            'account': 'XapiAccount',
            'member': 'list[XapiAgentGroup]'
        }

        self.attribute_map = {
            'object_type': 'objectType',
            'name': 'name',
            'mbox': 'mbox',
            'mbox_sha1sum': 'mbox_sha1sum',
            'openid': 'openid',
            'account': 'account',
            'member': 'member'
        }

        self._object_type = object_type
        self._name = name
        self._mbox = mbox
        self._mbox_sha1sum = mbox_sha1sum
        self._openid = openid
        self._account = account
        self._member = member

    @property
    def object_type(self):
        """
        Gets the object_type of this XapiAgentGroup.

        :return: The object_type of this XapiAgentGroup.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """
        Sets the object_type of this XapiAgentGroup.

        :param object_type: The object_type of this XapiAgentGroup.
        :type: str
        """
        allowed_values = ["Agent", "Group"]
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def name(self):
        """
        Gets the name of this XapiAgentGroup.

        :return: The name of this XapiAgentGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this XapiAgentGroup.

        :param name: The name of this XapiAgentGroup.
        :type: str
        """

        self._name = name

    @property
    def mbox(self):
        """
        Gets the mbox of this XapiAgentGroup.

        :return: The mbox of this XapiAgentGroup.
        :rtype: str
        """
        return self._mbox

    @mbox.setter
    def mbox(self, mbox):
        """
        Sets the mbox of this XapiAgentGroup.

        :param mbox: The mbox of this XapiAgentGroup.
        :type: str
        """

        self._mbox = mbox

    @property
    def mbox_sha1sum(self):
        """
        Gets the mbox_sha1sum of this XapiAgentGroup.

        :return: The mbox_sha1sum of this XapiAgentGroup.
        :rtype: str
        """
        return self._mbox_sha1sum

    @mbox_sha1sum.setter
    def mbox_sha1sum(self, mbox_sha1sum):
        """
        Sets the mbox_sha1sum of this XapiAgentGroup.

        :param mbox_sha1sum: The mbox_sha1sum of this XapiAgentGroup.
        :type: str
        """

        self._mbox_sha1sum = mbox_sha1sum

    @property
    def openid(self):
        """
        Gets the openid of this XapiAgentGroup.

        :return: The openid of this XapiAgentGroup.
        :rtype: str
        """
        return self._openid

    @openid.setter
    def openid(self, openid):
        """
        Sets the openid of this XapiAgentGroup.

        :param openid: The openid of this XapiAgentGroup.
        :type: str
        """

        self._openid = openid

    @property
    def account(self):
        """
        Gets the account of this XapiAgentGroup.

        :return: The account of this XapiAgentGroup.
        :rtype: XapiAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this XapiAgentGroup.

        :param account: The account of this XapiAgentGroup.
        :type: XapiAccount
        """

        self._account = account

    @property
    def member(self):
        """
        Gets the member of this XapiAgentGroup.

        :return: The member of this XapiAgentGroup.
        :rtype: list[XapiAgentGroup]
        """
        return self._member

    @member.setter
    def member(self, member):
        """
        Sets the member of this XapiAgentGroup.

        :param member: The member of this XapiAgentGroup.
        :type: list[XapiAgentGroup]
        """

        self._member = member

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, XapiAgentGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
