# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DispatchSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_id': 'str',
        'destination_name': 'str',
        'course_id': 'str',
        'course_title': 'str',
        'updated': 'datetime',
        'created': 'datetime',
        'allow_new_registrations': 'bool',
        'enabled': 'bool',
        'instanced': 'bool',
        'registration_cap': 'int',
        'registration_count': 'int',
        'expiration_date': 'datetime',
        'tags': 'list[str]',
        'email': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'destination_id': 'destinationId',
        'destination_name': 'destinationName',
        'course_id': 'courseId',
        'course_title': 'courseTitle',
        'updated': 'updated',
        'created': 'created',
        'allow_new_registrations': 'allowNewRegistrations',
        'enabled': 'enabled',
        'instanced': 'instanced',
        'registration_cap': 'registrationCap',
        'registration_count': 'registrationCount',
        'expiration_date': 'expirationDate',
        'tags': 'tags',
        'email': 'email',
        'notes': 'notes'
    }

    def __init__(self, destination_id=None, destination_name=None, course_id=None, course_title=None, updated=None, created=None, allow_new_registrations=None, enabled=None, instanced=None, registration_cap=None, registration_count=None, expiration_date=None, tags=None, email=None, notes=None):  # noqa: E501
        """DispatchSchema - a model defined in Swagger"""  # noqa: E501

        self._destination_id = None
        self._destination_name = None
        self._course_id = None
        self._course_title = None
        self._updated = None
        self._created = None
        self._allow_new_registrations = None
        self._enabled = None
        self._instanced = None
        self._registration_cap = None
        self._registration_count = None
        self._expiration_date = None
        self._tags = None
        self._email = None
        self._notes = None
        self.discriminator = None

        if destination_id is not None:
            self.destination_id = destination_id
        if destination_name is not None:
            self.destination_name = destination_name
        if course_id is not None:
            self.course_id = course_id
        if course_title is not None:
            self.course_title = course_title
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        if allow_new_registrations is not None:
            self.allow_new_registrations = allow_new_registrations
        if enabled is not None:
            self.enabled = enabled
        if instanced is not None:
            self.instanced = instanced
        if registration_cap is not None:
            self.registration_cap = registration_cap
        if registration_count is not None:
            self.registration_count = registration_count
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if tags is not None:
            self.tags = tags
        if email is not None:
            self.email = email
        if notes is not None:
            self.notes = notes

    @property
    def destination_id(self):
        """Gets the destination_id of this DispatchSchema.  # noqa: E501

        Destination ID.  # noqa: E501

        :return: The destination_id of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this DispatchSchema.

        Destination ID.  # noqa: E501

        :param destination_id: The destination_id of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this DispatchSchema.  # noqa: E501

        Name of the destination housing this dispatch  # noqa: E501

        :return: The destination_name of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this DispatchSchema.

        Name of the destination housing this dispatch  # noqa: E501

        :param destination_name: The destination_name of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def course_id(self):
        """Gets the course_id of this DispatchSchema.  # noqa: E501

        Serialized external package ID.  # noqa: E501

        :return: The course_id of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this DispatchSchema.

        Serialized external package ID.  # noqa: E501

        :param course_id: The course_id of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._course_id = course_id

    @property
    def course_title(self):
        """Gets the course_title of this DispatchSchema.  # noqa: E501

        Title of this dispatched course  # noqa: E501

        :return: The course_title of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._course_title

    @course_title.setter
    def course_title(self, course_title):
        """Sets the course_title of this DispatchSchema.

        Title of this dispatched course  # noqa: E501

        :param course_title: The course_title of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._course_title = course_title

    @property
    def updated(self):
        """Gets the updated of this DispatchSchema.  # noqa: E501

        :return: The updated of this DispatchSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DispatchSchema.

        :param updated: The updated of this DispatchSchema.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this DispatchSchema.  # noqa: E501

        :return: The created of this DispatchSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DispatchSchema.

        :param created: The created of this DispatchSchema.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def allow_new_registrations(self):
        """Gets the allow_new_registrations of this DispatchSchema.  # noqa: E501

        If true, then new registrations can be created for this dispatch.   # noqa: E501

        :return: The allow_new_registrations of this DispatchSchema.  # noqa: E501
        :rtype: bool
        """
        return self._allow_new_registrations

    @allow_new_registrations.setter
    def allow_new_registrations(self, allow_new_registrations):
        """Sets the allow_new_registrations of this DispatchSchema.

        If true, then new registrations can be created for this dispatch.   # noqa: E501

        :param allow_new_registrations: The allow_new_registrations of this DispatchSchema.  # noqa: E501
        :type: bool
        """

        self._allow_new_registrations = allow_new_registrations

    @property
    def enabled(self):
        """Gets the enabled of this DispatchSchema.  # noqa: E501

        If false, the dispatch can not be launched.  # noqa: E501

        :return: The enabled of this DispatchSchema.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DispatchSchema.

        If false, the dispatch can not be launched.  # noqa: E501

        :param enabled: The enabled of this DispatchSchema.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def instanced(self):
        """Gets the instanced of this DispatchSchema.  # noqa: E501

        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id.   # noqa: E501

        :return: The instanced of this DispatchSchema.  # noqa: E501
        :rtype: bool
        """
        return self._instanced

    @instanced.setter
    def instanced(self, instanced):
        """Sets the instanced of this DispatchSchema.

        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id.   # noqa: E501

        :param instanced: The instanced of this DispatchSchema.  # noqa: E501
        :type: bool
        """

        self._instanced = instanced

    @property
    def registration_cap(self):
        """Gets the registration_cap of this DispatchSchema.  # noqa: E501

        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'.   # noqa: E501

        :return: The registration_cap of this DispatchSchema.  # noqa: E501
        :rtype: int
        """
        return self._registration_cap

    @registration_cap.setter
    def registration_cap(self, registration_cap):
        """Sets the registration_cap of this DispatchSchema.

        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'.   # noqa: E501

        :param registration_cap: The registration_cap of this DispatchSchema.  # noqa: E501
        :type: int
        """

        self._registration_cap = registration_cap

    @property
    def registration_count(self):
        """Gets the registration_count of this DispatchSchema.  # noqa: E501

        The current number of registrations that have been created for this dispatch.   # noqa: E501

        :return: The registration_count of this DispatchSchema.  # noqa: E501
        :rtype: int
        """
        return self._registration_count

    @registration_count.setter
    def registration_count(self, registration_count):
        """Sets the registration_count of this DispatchSchema.

        The current number of registrations that have been created for this dispatch.   # noqa: E501

        :param registration_count: The registration_count of this DispatchSchema.  # noqa: E501
        :type: int
        """

        self._registration_count = registration_count

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DispatchSchema.  # noqa: E501

        The ISO 8601 TimeStamp (defaults to UTC) after which this dispatch will be disabled. An empty value will represent no expiration date.   # noqa: E501

        :return: The expiration_date of this DispatchSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DispatchSchema.

        The ISO 8601 TimeStamp (defaults to UTC) after which this dispatch will be disabled. An empty value will represent no expiration date.   # noqa: E501

        :param expiration_date: The expiration_date of this DispatchSchema.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def tags(self):
        """Gets the tags of this DispatchSchema.  # noqa: E501

        The tags to associate with this Dispatch.  # noqa: E501

        :return: The tags of this DispatchSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DispatchSchema.

        The tags to associate with this Dispatch.  # noqa: E501

        :param tags: The tags of this DispatchSchema.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def email(self):
        """Gets the email of this DispatchSchema.  # noqa: E501

        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm.   # noqa: E501

        :return: The email of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DispatchSchema.

        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm.   # noqa: E501

        :param email: The email of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def notes(self):
        """Gets the notes of this DispatchSchema.  # noqa: E501

        Any provided notes about this dispatch.  # noqa: E501

        :return: The notes of this DispatchSchema.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DispatchSchema.

        Any provided notes about this dispatch.  # noqa: E501

        :param notes: The notes of this DispatchSchema.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DispatchSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DispatchSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
