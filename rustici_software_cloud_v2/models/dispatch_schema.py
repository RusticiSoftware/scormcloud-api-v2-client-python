# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DispatchSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, destination_id=None, course_id=None, allow_new_registrations=None, enabled=None, instanced=None, registration_cap=None, registration_count=None, expiration_date=None, tags=None, email=None, notes=None):
        """
        DispatchSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'destination_id': 'str',
            'course_id': 'str',
            'allow_new_registrations': 'bool',
            'enabled': 'bool',
            'instanced': 'bool',
            'registration_cap': 'int',
            'registration_count': 'int',
            'expiration_date': 'datetime',
            'tags': 'list[str]',
            'email': 'str',
            'notes': 'str'
        }

        self.attribute_map = {
            'destination_id': 'destinationId',
            'course_id': 'courseId',
            'allow_new_registrations': 'allowNewRegistrations',
            'enabled': 'enabled',
            'instanced': 'instanced',
            'registration_cap': 'registrationCap',
            'registration_count': 'registrationCount',
            'expiration_date': 'expirationDate',
            'tags': 'tags',
            'email': 'email',
            'notes': 'notes'
        }

        self._destination_id = destination_id
        self._course_id = course_id
        self._allow_new_registrations = allow_new_registrations
        self._enabled = enabled
        self._instanced = instanced
        self._registration_cap = registration_cap
        self._registration_count = registration_count
        self._expiration_date = expiration_date
        self._tags = tags
        self._email = email
        self._notes = notes

    @property
    def destination_id(self):
        """
        Gets the destination_id of this DispatchSchema.
        Destination ID.

        :return: The destination_id of this DispatchSchema.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """
        Sets the destination_id of this DispatchSchema.
        Destination ID.

        :param destination_id: The destination_id of this DispatchSchema.
        :type: str
        """

        self._destination_id = destination_id

    @property
    def course_id(self):
        """
        Gets the course_id of this DispatchSchema.
        Serialized external package ID.

        :return: The course_id of this DispatchSchema.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """
        Sets the course_id of this DispatchSchema.
        Serialized external package ID.

        :param course_id: The course_id of this DispatchSchema.
        :type: str
        """

        self._course_id = course_id

    @property
    def allow_new_registrations(self):
        """
        Gets the allow_new_registrations of this DispatchSchema.
        If true, then new registrations can be created for this dispatch. 

        :return: The allow_new_registrations of this DispatchSchema.
        :rtype: bool
        """
        return self._allow_new_registrations

    @allow_new_registrations.setter
    def allow_new_registrations(self, allow_new_registrations):
        """
        Sets the allow_new_registrations of this DispatchSchema.
        If true, then new registrations can be created for this dispatch. 

        :param allow_new_registrations: The allow_new_registrations of this DispatchSchema.
        :type: bool
        """

        self._allow_new_registrations = allow_new_registrations

    @property
    def enabled(self):
        """
        Gets the enabled of this DispatchSchema.
        If false, the dispatch can not be launched.

        :return: The enabled of this DispatchSchema.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this DispatchSchema.
        If false, the dispatch can not be launched.

        :param enabled: The enabled of this DispatchSchema.
        :type: bool
        """

        self._enabled = enabled

    @property
    def instanced(self):
        """
        Gets the instanced of this DispatchSchema.
        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. 

        :return: The instanced of this DispatchSchema.
        :rtype: bool
        """
        return self._instanced

    @instanced.setter
    def instanced(self, instanced):
        """
        Sets the instanced of this DispatchSchema.
        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. 

        :param instanced: The instanced of this DispatchSchema.
        :type: bool
        """

        self._instanced = instanced

    @property
    def registration_cap(self):
        """
        Gets the registration_cap of this DispatchSchema.
        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'. 

        :return: The registration_cap of this DispatchSchema.
        :rtype: int
        """
        return self._registration_cap

    @registration_cap.setter
    def registration_cap(self, registration_cap):
        """
        Sets the registration_cap of this DispatchSchema.
        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'. 

        :param registration_cap: The registration_cap of this DispatchSchema.
        :type: int
        """

        self._registration_cap = registration_cap

    @property
    def registration_count(self):
        """
        Gets the registration_count of this DispatchSchema.
        The current number of registrations that have been created for this dispatch. 

        :return: The registration_count of this DispatchSchema.
        :rtype: int
        """
        return self._registration_count

    @registration_count.setter
    def registration_count(self, registration_count):
        """
        Sets the registration_count of this DispatchSchema.
        The current number of registrations that have been created for this dispatch. 

        :param registration_count: The registration_count of this DispatchSchema.
        :type: int
        """

        self._registration_count = registration_count

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this DispatchSchema.
        The date after which this dispatch will be disabled as an ISO 8601 string, or 'none' for no expiration date. 

        :return: The expiration_date of this DispatchSchema.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this DispatchSchema.
        The date after which this dispatch will be disabled as an ISO 8601 string, or 'none' for no expiration date. 

        :param expiration_date: The expiration_date of this DispatchSchema.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def tags(self):
        """
        Gets the tags of this DispatchSchema.
        The tags to associate with this Dispatch.

        :return: The tags of this DispatchSchema.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DispatchSchema.
        The tags to associate with this Dispatch.

        :param tags: The tags of this DispatchSchema.
        :type: list[str]
        """

        self._tags = tags

    @property
    def email(self):
        """
        Gets the email of this DispatchSchema.
        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. 

        :return: The email of this DispatchSchema.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this DispatchSchema.
        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. 

        :param email: The email of this DispatchSchema.
        :type: str
        """

        self._email = email

    @property
    def notes(self):
        """
        Gets the notes of this DispatchSchema.
        Any provided notes about this dispatch.

        :return: The notes of this DispatchSchema.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this DispatchSchema.
        Any provided notes about this dispatch.

        :param notes: The notes of this DispatchSchema.
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DispatchSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
