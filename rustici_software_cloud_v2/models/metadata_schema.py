# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MetadataSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, title_language=None, description=None, description_language=None, duration=None, typicaltime=None, keywords=None):
        """
        MetadataSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'title_language': 'str',
            'description': 'str',
            'description_language': 'str',
            'duration': 'str',
            'typicaltime': 'str',
            'keywords': 'list[str]'
        }

        self.attribute_map = {
            'title': 'title',
            'title_language': 'titleLanguage',
            'description': 'description',
            'description_language': 'descriptionLanguage',
            'duration': 'duration',
            'typicaltime': 'typicaltime',
            'keywords': 'keywords'
        }

        self._title = title
        self._title_language = title_language
        self._description = description
        self._description_language = description_language
        self._duration = duration
        self._typicaltime = typicaltime
        self._keywords = keywords

    @property
    def title(self):
        """
        Gets the title of this MetadataSchema.

        :return: The title of this MetadataSchema.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this MetadataSchema.

        :param title: The title of this MetadataSchema.
        :type: str
        """

        self._title = title

    @property
    def title_language(self):
        """
        Gets the title_language of this MetadataSchema.

        :return: The title_language of this MetadataSchema.
        :rtype: str
        """
        return self._title_language

    @title_language.setter
    def title_language(self, title_language):
        """
        Sets the title_language of this MetadataSchema.

        :param title_language: The title_language of this MetadataSchema.
        :type: str
        """

        self._title_language = title_language

    @property
    def description(self):
        """
        Gets the description of this MetadataSchema.

        :return: The description of this MetadataSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MetadataSchema.

        :param description: The description of this MetadataSchema.
        :type: str
        """

        self._description = description

    @property
    def description_language(self):
        """
        Gets the description_language of this MetadataSchema.

        :return: The description_language of this MetadataSchema.
        :rtype: str
        """
        return self._description_language

    @description_language.setter
    def description_language(self, description_language):
        """
        Sets the description_language of this MetadataSchema.

        :param description_language: The description_language of this MetadataSchema.
        :type: str
        """

        self._description_language = description_language

    @property
    def duration(self):
        """
        Gets the duration of this MetadataSchema.

        :return: The duration of this MetadataSchema.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this MetadataSchema.

        :param duration: The duration of this MetadataSchema.
        :type: str
        """

        self._duration = duration

    @property
    def typicaltime(self):
        """
        Gets the typicaltime of this MetadataSchema.

        :return: The typicaltime of this MetadataSchema.
        :rtype: str
        """
        return self._typicaltime

    @typicaltime.setter
    def typicaltime(self, typicaltime):
        """
        Sets the typicaltime of this MetadataSchema.

        :param typicaltime: The typicaltime of this MetadataSchema.
        :type: str
        """

        self._typicaltime = typicaltime

    @property
    def keywords(self):
        """
        Gets the keywords of this MetadataSchema.

        :return: The keywords of this MetadataSchema.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this MetadataSchema.

        :param keywords: The keywords of this MetadataSchema.
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetadataSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
