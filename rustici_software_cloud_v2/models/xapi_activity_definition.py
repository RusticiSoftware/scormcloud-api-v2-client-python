# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class XapiActivityDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, type=None, more_info=None, interaction_type=None, correct_responses_pattern=None, choices=None, scale=None, source=None, target=None, steps=None, extensions=None):
        """
        XapiActivityDefinition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'dict(str, str)',
            'description': 'dict(str, str)',
            'type': 'str',
            'more_info': 'str',
            'interaction_type': 'str',
            'correct_responses_pattern': 'list[str]',
            'choices': 'list[XapiInteractionComponent]',
            'scale': 'list[XapiInteractionComponent]',
            'source': 'list[XapiInteractionComponent]',
            'target': 'list[XapiInteractionComponent]',
            'steps': 'list[XapiInteractionComponent]',
            'extensions': 'dict(str, object)'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'more_info': 'moreInfo',
            'interaction_type': 'interactionType',
            'correct_responses_pattern': 'correctResponsesPattern',
            'choices': 'choices',
            'scale': 'scale',
            'source': 'source',
            'target': 'target',
            'steps': 'steps',
            'extensions': 'extensions'
        }

        self._name = name
        self._description = description
        self._type = type
        self._more_info = more_info
        self._interaction_type = interaction_type
        self._correct_responses_pattern = correct_responses_pattern
        self._choices = choices
        self._scale = scale
        self._source = source
        self._target = target
        self._steps = steps
        self._extensions = extensions

    @property
    def name(self):
        """
        Gets the name of this XapiActivityDefinition.

        :return: The name of this XapiActivityDefinition.
        :rtype: dict(str, str)
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this XapiActivityDefinition.

        :param name: The name of this XapiActivityDefinition.
        :type: dict(str, str)
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this XapiActivityDefinition.

        :return: The description of this XapiActivityDefinition.
        :rtype: dict(str, str)
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this XapiActivityDefinition.

        :param description: The description of this XapiActivityDefinition.
        :type: dict(str, str)
        """

        self._description = description

    @property
    def type(self):
        """
        Gets the type of this XapiActivityDefinition.

        :return: The type of this XapiActivityDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this XapiActivityDefinition.

        :param type: The type of this XapiActivityDefinition.
        :type: str
        """

        self._type = type

    @property
    def more_info(self):
        """
        Gets the more_info of this XapiActivityDefinition.

        :return: The more_info of this XapiActivityDefinition.
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """
        Sets the more_info of this XapiActivityDefinition.

        :param more_info: The more_info of this XapiActivityDefinition.
        :type: str
        """

        self._more_info = more_info

    @property
    def interaction_type(self):
        """
        Gets the interaction_type of this XapiActivityDefinition.

        :return: The interaction_type of this XapiActivityDefinition.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """
        Sets the interaction_type of this XapiActivityDefinition.

        :param interaction_type: The interaction_type of this XapiActivityDefinition.
        :type: str
        """

        self._interaction_type = interaction_type

    @property
    def correct_responses_pattern(self):
        """
        Gets the correct_responses_pattern of this XapiActivityDefinition.

        :return: The correct_responses_pattern of this XapiActivityDefinition.
        :rtype: list[str]
        """
        return self._correct_responses_pattern

    @correct_responses_pattern.setter
    def correct_responses_pattern(self, correct_responses_pattern):
        """
        Sets the correct_responses_pattern of this XapiActivityDefinition.

        :param correct_responses_pattern: The correct_responses_pattern of this XapiActivityDefinition.
        :type: list[str]
        """

        self._correct_responses_pattern = correct_responses_pattern

    @property
    def choices(self):
        """
        Gets the choices of this XapiActivityDefinition.

        :return: The choices of this XapiActivityDefinition.
        :rtype: list[XapiInteractionComponent]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """
        Sets the choices of this XapiActivityDefinition.

        :param choices: The choices of this XapiActivityDefinition.
        :type: list[XapiInteractionComponent]
        """

        self._choices = choices

    @property
    def scale(self):
        """
        Gets the scale of this XapiActivityDefinition.

        :return: The scale of this XapiActivityDefinition.
        :rtype: list[XapiInteractionComponent]
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """
        Sets the scale of this XapiActivityDefinition.

        :param scale: The scale of this XapiActivityDefinition.
        :type: list[XapiInteractionComponent]
        """

        self._scale = scale

    @property
    def source(self):
        """
        Gets the source of this XapiActivityDefinition.

        :return: The source of this XapiActivityDefinition.
        :rtype: list[XapiInteractionComponent]
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this XapiActivityDefinition.

        :param source: The source of this XapiActivityDefinition.
        :type: list[XapiInteractionComponent]
        """

        self._source = source

    @property
    def target(self):
        """
        Gets the target of this XapiActivityDefinition.

        :return: The target of this XapiActivityDefinition.
        :rtype: list[XapiInteractionComponent]
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this XapiActivityDefinition.

        :param target: The target of this XapiActivityDefinition.
        :type: list[XapiInteractionComponent]
        """

        self._target = target

    @property
    def steps(self):
        """
        Gets the steps of this XapiActivityDefinition.

        :return: The steps of this XapiActivityDefinition.
        :rtype: list[XapiInteractionComponent]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this XapiActivityDefinition.

        :param steps: The steps of this XapiActivityDefinition.
        :type: list[XapiInteractionComponent]
        """

        self._steps = steps

    @property
    def extensions(self):
        """
        Gets the extensions of this XapiActivityDefinition.

        :return: The extensions of this XapiActivityDefinition.
        :rtype: dict(str, object)
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """
        Sets the extensions of this XapiActivityDefinition.

        :param extensions: The extensions of this XapiActivityDefinition.
        :type: dict(str, object)
        """

        self._extensions = extensions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, XapiActivityDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
