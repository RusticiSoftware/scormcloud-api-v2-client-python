# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XapiActivityDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'dict(str, str)',
        'description': 'dict(str, str)',
        'type': 'str',
        'more_info': 'str',
        'interaction_type': 'str',
        'correct_responses_pattern': 'list[str]',
        'choices': 'list[XapiInteractionComponent]',
        'scale': 'list[XapiInteractionComponent]',
        'source': 'list[XapiInteractionComponent]',
        'target': 'list[XapiInteractionComponent]',
        'steps': 'list[XapiInteractionComponent]',
        'extensions': 'dict(str, object)'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'more_info': 'moreInfo',
        'interaction_type': 'interactionType',
        'correct_responses_pattern': 'correctResponsesPattern',
        'choices': 'choices',
        'scale': 'scale',
        'source': 'source',
        'target': 'target',
        'steps': 'steps',
        'extensions': 'extensions'
    }

    def __init__(self, name=None, description=None, type=None, more_info=None, interaction_type=None, correct_responses_pattern=None, choices=None, scale=None, source=None, target=None, steps=None, extensions=None):  # noqa: E501
        """XapiActivityDefinition - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._type = None
        self._more_info = None
        self._interaction_type = None
        self._correct_responses_pattern = None
        self._choices = None
        self._scale = None
        self._source = None
        self._target = None
        self._steps = None
        self._extensions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if more_info is not None:
            self.more_info = more_info
        if interaction_type is not None:
            self.interaction_type = interaction_type
        if correct_responses_pattern is not None:
            self.correct_responses_pattern = correct_responses_pattern
        if choices is not None:
            self.choices = choices
        if scale is not None:
            self.scale = scale
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if steps is not None:
            self.steps = steps
        if extensions is not None:
            self.extensions = extensions

    @property
    def name(self):
        """Gets the name of this XapiActivityDefinition.  # noqa: E501

        :return: The name of this XapiActivityDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XapiActivityDefinition.

        :param name: The name of this XapiActivityDefinition.  # noqa: E501
        :type: dict(str, str)
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this XapiActivityDefinition.  # noqa: E501

        :return: The description of this XapiActivityDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XapiActivityDefinition.

        :param description: The description of this XapiActivityDefinition.  # noqa: E501
        :type: dict(str, str)
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this XapiActivityDefinition.  # noqa: E501

        :return: The type of this XapiActivityDefinition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this XapiActivityDefinition.

        :param type: The type of this XapiActivityDefinition.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def more_info(self):
        """Gets the more_info of this XapiActivityDefinition.  # noqa: E501

        :return: The more_info of this XapiActivityDefinition.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this XapiActivityDefinition.

        :param more_info: The more_info of this XapiActivityDefinition.  # noqa: E501
        :type: str
        """

        self._more_info = more_info

    @property
    def interaction_type(self):
        """Gets the interaction_type of this XapiActivityDefinition.  # noqa: E501

        :return: The interaction_type of this XapiActivityDefinition.  # noqa: E501
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """Sets the interaction_type of this XapiActivityDefinition.

        :param interaction_type: The interaction_type of this XapiActivityDefinition.  # noqa: E501
        :type: str
        """

        self._interaction_type = interaction_type

    @property
    def correct_responses_pattern(self):
        """Gets the correct_responses_pattern of this XapiActivityDefinition.  # noqa: E501

        :return: The correct_responses_pattern of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._correct_responses_pattern

    @correct_responses_pattern.setter
    def correct_responses_pattern(self, correct_responses_pattern):
        """Sets the correct_responses_pattern of this XapiActivityDefinition.

        :param correct_responses_pattern: The correct_responses_pattern of this XapiActivityDefinition.  # noqa: E501
        :type: list[str]
        """

        self._correct_responses_pattern = correct_responses_pattern

    @property
    def choices(self):
        """Gets the choices of this XapiActivityDefinition.  # noqa: E501

        :return: The choices of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[XapiInteractionComponent]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this XapiActivityDefinition.

        :param choices: The choices of this XapiActivityDefinition.  # noqa: E501
        :type: list[XapiInteractionComponent]
        """

        self._choices = choices

    @property
    def scale(self):
        """Gets the scale of this XapiActivityDefinition.  # noqa: E501

        :return: The scale of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[XapiInteractionComponent]
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this XapiActivityDefinition.

        :param scale: The scale of this XapiActivityDefinition.  # noqa: E501
        :type: list[XapiInteractionComponent]
        """

        self._scale = scale

    @property
    def source(self):
        """Gets the source of this XapiActivityDefinition.  # noqa: E501

        :return: The source of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[XapiInteractionComponent]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this XapiActivityDefinition.

        :param source: The source of this XapiActivityDefinition.  # noqa: E501
        :type: list[XapiInteractionComponent]
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this XapiActivityDefinition.  # noqa: E501

        :return: The target of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[XapiInteractionComponent]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this XapiActivityDefinition.

        :param target: The target of this XapiActivityDefinition.  # noqa: E501
        :type: list[XapiInteractionComponent]
        """

        self._target = target

    @property
    def steps(self):
        """Gets the steps of this XapiActivityDefinition.  # noqa: E501

        :return: The steps of this XapiActivityDefinition.  # noqa: E501
        :rtype: list[XapiInteractionComponent]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this XapiActivityDefinition.

        :param steps: The steps of this XapiActivityDefinition.  # noqa: E501
        :type: list[XapiInteractionComponent]
        """

        self._steps = steps

    @property
    def extensions(self):
        """Gets the extensions of this XapiActivityDefinition.  # noqa: E501

        :return: The extensions of this XapiActivityDefinition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this XapiActivityDefinition.

        :param extensions: The extensions of this XapiActivityDefinition.  # noqa: E501
        :type: dict(str, object)
        """

        self._extensions = extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XapiActivityDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XapiActivityDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
