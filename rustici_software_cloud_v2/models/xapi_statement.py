# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class XapiStatement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, actor=None, verb=None, object_activity=None, object_agent_group=None, object_statement_reference=None, object_sub_statement=None, result=None, context=None, timestamp=None, stored=None, authority=None, attachments=None):
        """
        XapiStatement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'actor': 'XapiAgentGroup',
            'verb': 'XapiVerb',
            'object_activity': 'XapiActivity',
            'object_agent_group': 'XapiAgentGroup',
            'object_statement_reference': 'XapiStatementReference',
            'object_sub_statement': 'XapiStatement',
            'result': 'XapiResult',
            'context': 'XapiContext',
            'timestamp': 'datetime',
            'stored': 'datetime',
            'authority': 'XapiAgentGroup',
            'attachments': 'list[XapiAttachment]'
        }

        self.attribute_map = {
            'id': 'id',
            'actor': 'actor',
            'verb': 'verb',
            'object_activity': 'objectActivity',
            'object_agent_group': 'objectAgentGroup',
            'object_statement_reference': 'objectStatementReference',
            'object_sub_statement': 'objectSubStatement',
            'result': 'result',
            'context': 'context',
            'timestamp': 'timestamp',
            'stored': 'stored',
            'authority': 'authority',
            'attachments': 'attachments'
        }

        self._id = id
        self._actor = actor
        self._verb = verb
        self._object_activity = object_activity
        self._object_agent_group = object_agent_group
        self._object_statement_reference = object_statement_reference
        self._object_sub_statement = object_sub_statement
        self._result = result
        self._context = context
        self._timestamp = timestamp
        self._stored = stored
        self._authority = authority
        self._attachments = attachments

    @property
    def id(self):
        """
        Gets the id of this XapiStatement.

        :return: The id of this XapiStatement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this XapiStatement.

        :param id: The id of this XapiStatement.
        :type: str
        """

        self._id = id

    @property
    def actor(self):
        """
        Gets the actor of this XapiStatement.

        :return: The actor of this XapiStatement.
        :rtype: XapiAgentGroup
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """
        Sets the actor of this XapiStatement.

        :param actor: The actor of this XapiStatement.
        :type: XapiAgentGroup
        """

        self._actor = actor

    @property
    def verb(self):
        """
        Gets the verb of this XapiStatement.

        :return: The verb of this XapiStatement.
        :rtype: XapiVerb
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """
        Sets the verb of this XapiStatement.

        :param verb: The verb of this XapiStatement.
        :type: XapiVerb
        """

        self._verb = verb

    @property
    def object_activity(self):
        """
        Gets the object_activity of this XapiStatement.

        :return: The object_activity of this XapiStatement.
        :rtype: XapiActivity
        """
        return self._object_activity

    @object_activity.setter
    def object_activity(self, object_activity):
        """
        Sets the object_activity of this XapiStatement.

        :param object_activity: The object_activity of this XapiStatement.
        :type: XapiActivity
        """

        self._object_activity = object_activity

    @property
    def object_agent_group(self):
        """
        Gets the object_agent_group of this XapiStatement.

        :return: The object_agent_group of this XapiStatement.
        :rtype: XapiAgentGroup
        """
        return self._object_agent_group

    @object_agent_group.setter
    def object_agent_group(self, object_agent_group):
        """
        Sets the object_agent_group of this XapiStatement.

        :param object_agent_group: The object_agent_group of this XapiStatement.
        :type: XapiAgentGroup
        """

        self._object_agent_group = object_agent_group

    @property
    def object_statement_reference(self):
        """
        Gets the object_statement_reference of this XapiStatement.

        :return: The object_statement_reference of this XapiStatement.
        :rtype: XapiStatementReference
        """
        return self._object_statement_reference

    @object_statement_reference.setter
    def object_statement_reference(self, object_statement_reference):
        """
        Sets the object_statement_reference of this XapiStatement.

        :param object_statement_reference: The object_statement_reference of this XapiStatement.
        :type: XapiStatementReference
        """

        self._object_statement_reference = object_statement_reference

    @property
    def object_sub_statement(self):
        """
        Gets the object_sub_statement of this XapiStatement.

        :return: The object_sub_statement of this XapiStatement.
        :rtype: XapiStatement
        """
        return self._object_sub_statement

    @object_sub_statement.setter
    def object_sub_statement(self, object_sub_statement):
        """
        Sets the object_sub_statement of this XapiStatement.

        :param object_sub_statement: The object_sub_statement of this XapiStatement.
        :type: XapiStatement
        """

        self._object_sub_statement = object_sub_statement

    @property
    def result(self):
        """
        Gets the result of this XapiStatement.

        :return: The result of this XapiStatement.
        :rtype: XapiResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this XapiStatement.

        :param result: The result of this XapiStatement.
        :type: XapiResult
        """

        self._result = result

    @property
    def context(self):
        """
        Gets the context of this XapiStatement.

        :return: The context of this XapiStatement.
        :rtype: XapiContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this XapiStatement.

        :param context: The context of this XapiStatement.
        :type: XapiContext
        """

        self._context = context

    @property
    def timestamp(self):
        """
        Gets the timestamp of this XapiStatement.

        :return: The timestamp of this XapiStatement.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this XapiStatement.

        :param timestamp: The timestamp of this XapiStatement.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def stored(self):
        """
        Gets the stored of this XapiStatement.

        :return: The stored of this XapiStatement.
        :rtype: datetime
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """
        Sets the stored of this XapiStatement.

        :param stored: The stored of this XapiStatement.
        :type: datetime
        """

        self._stored = stored

    @property
    def authority(self):
        """
        Gets the authority of this XapiStatement.

        :return: The authority of this XapiStatement.
        :rtype: XapiAgentGroup
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """
        Sets the authority of this XapiStatement.

        :param authority: The authority of this XapiStatement.
        :type: XapiAgentGroup
        """

        self._authority = authority

    @property
    def attachments(self):
        """
        Gets the attachments of this XapiStatement.

        :return: The attachments of this XapiStatement.
        :rtype: list[XapiAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """
        Sets the attachments of this XapiStatement.

        :param attachments: The attachments of this XapiStatement.
        :type: list[XapiAttachment]
        """

        self._attachments = attachments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, XapiStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
