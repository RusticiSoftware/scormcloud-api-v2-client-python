# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateDispatchSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allow_new_registrations=None, instanced=None, registration_cap=None, expiration_date=None, enabled=None, email=None, notes=None, post_back=None):
        """
        UpdateDispatchSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'allow_new_registrations': 'bool',
            'instanced': 'bool',
            'registration_cap': 'int',
            'expiration_date': 'datetime',
            'enabled': 'bool',
            'email': 'str',
            'notes': 'str',
            'post_back': 'PostBackSchema'
        }

        self.attribute_map = {
            'allow_new_registrations': 'allowNewRegistrations',
            'instanced': 'instanced',
            'registration_cap': 'registrationCap',
            'expiration_date': 'expirationDate',
            'enabled': 'enabled',
            'email': 'email',
            'notes': 'notes',
            'post_back': 'postBack'
        }

        self._allow_new_registrations = allow_new_registrations
        self._instanced = instanced
        self._registration_cap = registration_cap
        self._expiration_date = expiration_date
        self._enabled = enabled
        self._email = email
        self._notes = notes
        self._post_back = post_back

    @property
    def allow_new_registrations(self):
        """
        Gets the allow_new_registrations of this UpdateDispatchSchema.
        If true, then new registrations can be created for this dispatch. 

        :return: The allow_new_registrations of this UpdateDispatchSchema.
        :rtype: bool
        """
        return self._allow_new_registrations

    @allow_new_registrations.setter
    def allow_new_registrations(self, allow_new_registrations):
        """
        Sets the allow_new_registrations of this UpdateDispatchSchema.
        If true, then new registrations can be created for this dispatch. 

        :param allow_new_registrations: The allow_new_registrations of this UpdateDispatchSchema.
        :type: bool
        """

        self._allow_new_registrations = allow_new_registrations

    @property
    def instanced(self):
        """
        Gets the instanced of this UpdateDispatchSchema.
        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. 

        :return: The instanced of this UpdateDispatchSchema.
        :rtype: bool
        """
        return self._instanced

    @instanced.setter
    def instanced(self, instanced):
        """
        Sets the instanced of this UpdateDispatchSchema.
        If true, then a new registration instance will be created if the client LMS doesn't provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. 

        :param instanced: The instanced of this UpdateDispatchSchema.
        :type: bool
        """

        self._instanced = instanced

    @property
    def registration_cap(self):
        """
        Gets the registration_cap of this UpdateDispatchSchema.
        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'. 

        :return: The registration_cap of this UpdateDispatchSchema.
        :rtype: int
        """
        return self._registration_cap

    @registration_cap.setter
    def registration_cap(self, registration_cap):
        """
        Sets the registration_cap of this UpdateDispatchSchema.
        The maximum number of registrations that can be created for this dispatch, where '0' means 'unlimited registrations'. 

        :param registration_cap: The registration_cap of this UpdateDispatchSchema.
        :type: int
        """

        self._registration_cap = registration_cap

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this UpdateDispatchSchema.
        The date after which this dispatch will be disabled as an ISO 8601 string, or not present for no expiration date. 

        :return: The expiration_date of this UpdateDispatchSchema.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this UpdateDispatchSchema.
        The date after which this dispatch will be disabled as an ISO 8601 string, or not present for no expiration date. 

        :param expiration_date: The expiration_date of this UpdateDispatchSchema.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def enabled(self):
        """
        Gets the enabled of this UpdateDispatchSchema.
        If true, then this dispatch can be launched. 

        :return: The enabled of this UpdateDispatchSchema.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this UpdateDispatchSchema.
        If true, then this dispatch can be launched. 

        :param enabled: The enabled of this UpdateDispatchSchema.
        :type: bool
        """

        self._enabled = enabled

    @property
    def email(self):
        """
        Gets the email of this UpdateDispatchSchema.
        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. 

        :return: The email of this UpdateDispatchSchema.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UpdateDispatchSchema.
        SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. 

        :param email: The email of this UpdateDispatchSchema.
        :type: str
        """

        self._email = email

    @property
    def notes(self):
        """
        Gets the notes of this UpdateDispatchSchema.
        Any provided notes about this dispatch.

        :return: The notes of this UpdateDispatchSchema.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this UpdateDispatchSchema.
        Any provided notes about this dispatch.

        :param notes: The notes of this UpdateDispatchSchema.
        :type: str
        """

        self._notes = notes

    @property
    def post_back(self):
        """
        Gets the post_back of this UpdateDispatchSchema.
        The postback information for this Dispatch.

        :return: The post_back of this UpdateDispatchSchema.
        :rtype: PostBackSchema
        """
        return self._post_back

    @post_back.setter
    def post_back(self, post_back):
        """
        Sets the post_back of this UpdateDispatchSchema.
        The postback information for this Dispatch.

        :param post_back: The post_back of this UpdateDispatchSchema.
        :type: PostBackSchema
        """

        self._post_back = post_back

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateDispatchSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
