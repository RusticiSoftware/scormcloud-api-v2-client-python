# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CredentialSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'credential': 'str',
        'pens_credential': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'credential': 'credential',
        'pens_credential': 'pensCredential',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, credential=None, pens_credential=None, status=None):  # noqa: E501
        """CredentialSchema - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._credential = None
        self._pens_credential = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if credential is not None:
            self.credential = credential
        if pens_credential is not None:
            self.pens_credential = pens_credential
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this CredentialSchema.  # noqa: E501

        id for this credential  # noqa: E501

        :return: The id of this CredentialSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialSchema.

        id for this credential  # noqa: E501

        :param id: The id of this CredentialSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CredentialSchema.  # noqa: E501

        name for this credential  # noqa: E501

        :return: The name of this CredentialSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialSchema.

        name for this credential  # noqa: E501

        :param name: The name of this CredentialSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def credential(self):
        """Gets the credential of this CredentialSchema.  # noqa: E501

        The newly created API credential  # noqa: E501

        :return: The credential of this CredentialSchema.  # noqa: E501
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this CredentialSchema.

        The newly created API credential  # noqa: E501

        :param credential: The credential of this CredentialSchema.  # noqa: E501
        :type: str
        """

        self._credential = credential

    @property
    def pens_credential(self):
        """Gets the pens_credential of this CredentialSchema.  # noqa: E501

        The PENS key for this credential  # noqa: E501

        :return: The pens_credential of this CredentialSchema.  # noqa: E501
        :rtype: str
        """
        return self._pens_credential

    @pens_credential.setter
    def pens_credential(self, pens_credential):
        """Sets the pens_credential of this CredentialSchema.

        The PENS key for this credential  # noqa: E501

        :param pens_credential: The pens_credential of this CredentialSchema.  # noqa: E501
        :type: str
        """

        self._pens_credential = pens_credential

    @property
    def status(self):
        """Gets the status of this CredentialSchema.  # noqa: E501


        :return: The status of this CredentialSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CredentialSchema.


        :param status: The status of this CredentialSchema.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
