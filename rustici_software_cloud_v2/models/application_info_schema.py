# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationInfoSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'create_date': 'datetime',
        'update_date': 'datetime',
        'allow_delete': 'bool',
        'course_count': 'int',
        'registration_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'create_date': 'createDate',
        'update_date': 'updateDate',
        'allow_delete': 'allowDelete',
        'course_count': 'courseCount',
        'registration_count': 'registrationCount'
    }

    def __init__(self, id=None, name=None, create_date=None, update_date=None, allow_delete=None, course_count=None, registration_count=None):  # noqa: E501
        """ApplicationInfoSchema - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._create_date = None
        self._update_date = None
        self._allow_delete = None
        self._course_count = None
        self._registration_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date
        if allow_delete is not None:
            self.allow_delete = allow_delete
        if course_count is not None:
            self.course_count = course_count
        if registration_count is not None:
            self.registration_count = registration_count

    @property
    def id(self):
        """Gets the id of this ApplicationInfoSchema.  # noqa: E501

        The application id for this application.  # noqa: E501

        :return: The id of this ApplicationInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationInfoSchema.

        The application id for this application.  # noqa: E501

        :param id: The id of this ApplicationInfoSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApplicationInfoSchema.  # noqa: E501

        The name of this application.  # noqa: E501

        :return: The name of this ApplicationInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationInfoSchema.

        The name of this application.  # noqa: E501

        :param name: The name of this ApplicationInfoSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def create_date(self):
        """Gets the create_date of this ApplicationInfoSchema.  # noqa: E501

        The time the application was created in UTC  # noqa: E501

        :return: The create_date of this ApplicationInfoSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ApplicationInfoSchema.

        The time the application was created in UTC  # noqa: E501

        :param create_date: The create_date of this ApplicationInfoSchema.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this ApplicationInfoSchema.  # noqa: E501

        The time the application was last updated in UTC  # noqa: E501

        :return: The update_date of this ApplicationInfoSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ApplicationInfoSchema.

        The time the application was last updated in UTC  # noqa: E501

        :param update_date: The update_date of this ApplicationInfoSchema.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def allow_delete(self):
        """Gets the allow_delete of this ApplicationInfoSchema.  # noqa: E501

        Whether the application is allowed to perform delete operations  # noqa: E501

        :return: The allow_delete of this ApplicationInfoSchema.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """Sets the allow_delete of this ApplicationInfoSchema.

        Whether the application is allowed to perform delete operations  # noqa: E501

        :param allow_delete: The allow_delete of this ApplicationInfoSchema.  # noqa: E501
        :type: bool
        """

        self._allow_delete = allow_delete

    @property
    def course_count(self):
        """Gets the course_count of this ApplicationInfoSchema.  # noqa: E501

        :return: The course_count of this ApplicationInfoSchema.  # noqa: E501
        :rtype: int
        """
        return self._course_count

    @course_count.setter
    def course_count(self, course_count):
        """Sets the course_count of this ApplicationInfoSchema.

        :param course_count: The course_count of this ApplicationInfoSchema.  # noqa: E501
        :type: int
        """

        self._course_count = course_count

    @property
    def registration_count(self):
        """Gets the registration_count of this ApplicationInfoSchema.  # noqa: E501

        :return: The registration_count of this ApplicationInfoSchema.  # noqa: E501
        :rtype: int
        """
        return self._registration_count

    @registration_count.setter
    def registration_count(self, registration_count):
        """Sets the registration_count of this ApplicationInfoSchema.

        :param registration_count: The registration_count of this ApplicationInfoSchema.  # noqa: E501
        :type: int
        """

        self._registration_count = registration_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationInfoSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationInfoSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
