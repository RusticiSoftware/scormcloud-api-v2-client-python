# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LearnerPreferenceSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_level': 'float',
        'language': 'str',
        'delivery_speed': 'float',
        'audio_captioning': 'int'
    }

    attribute_map = {
        'audio_level': 'audioLevel',
        'language': 'language',
        'delivery_speed': 'deliverySpeed',
        'audio_captioning': 'audioCaptioning'
    }

    def __init__(self, audio_level=None, language=None, delivery_speed=None, audio_captioning=None):  # noqa: E501
        """LearnerPreferenceSchema - a model defined in Swagger"""  # noqa: E501

        self._audio_level = None
        self._language = None
        self._delivery_speed = None
        self._audio_captioning = None
        self.discriminator = None

        if audio_level is not None:
            self.audio_level = audio_level
        if language is not None:
            self.language = language
        if delivery_speed is not None:
            self.delivery_speed = delivery_speed
        if audio_captioning is not None:
            self.audio_captioning = audio_captioning

    @property
    def audio_level(self):
        """Gets the audio_level of this LearnerPreferenceSchema.  # noqa: E501


        :return: The audio_level of this LearnerPreferenceSchema.  # noqa: E501
        :rtype: float
        """
        return self._audio_level

    @audio_level.setter
    def audio_level(self, audio_level):
        """Sets the audio_level of this LearnerPreferenceSchema.


        :param audio_level: The audio_level of this LearnerPreferenceSchema.  # noqa: E501
        :type: float
        """

        self._audio_level = audio_level

    @property
    def language(self):
        """Gets the language of this LearnerPreferenceSchema.  # noqa: E501


        :return: The language of this LearnerPreferenceSchema.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LearnerPreferenceSchema.


        :param language: The language of this LearnerPreferenceSchema.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def delivery_speed(self):
        """Gets the delivery_speed of this LearnerPreferenceSchema.  # noqa: E501


        :return: The delivery_speed of this LearnerPreferenceSchema.  # noqa: E501
        :rtype: float
        """
        return self._delivery_speed

    @delivery_speed.setter
    def delivery_speed(self, delivery_speed):
        """Sets the delivery_speed of this LearnerPreferenceSchema.


        :param delivery_speed: The delivery_speed of this LearnerPreferenceSchema.  # noqa: E501
        :type: float
        """

        self._delivery_speed = delivery_speed

    @property
    def audio_captioning(self):
        """Gets the audio_captioning of this LearnerPreferenceSchema.  # noqa: E501


        :return: The audio_captioning of this LearnerPreferenceSchema.  # noqa: E501
        :rtype: int
        """
        return self._audio_captioning

    @audio_captioning.setter
    def audio_captioning(self, audio_captioning):
        """Sets the audio_captioning of this LearnerPreferenceSchema.


        :param audio_captioning: The audio_captioning of this LearnerPreferenceSchema.  # noqa: E501
        :type: int
        """

        self._audio_captioning = audio_captioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LearnerPreferenceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearnerPreferenceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
