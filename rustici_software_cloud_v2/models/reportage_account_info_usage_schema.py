# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportageAccountInfoUsageSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, month_start=None, reg_count=None, total_registrations=None, total_courses=None):
        """
        ReportageAccountInfoUsageSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'month_start': 'datetime',
            'reg_count': 'int',
            'total_registrations': 'int',
            'total_courses': 'int'
        }

        self.attribute_map = {
            'month_start': 'monthStart',
            'reg_count': 'regCount',
            'total_registrations': 'totalRegistrations',
            'total_courses': 'totalCourses'
        }

        self._month_start = month_start
        self._reg_count = reg_count
        self._total_registrations = total_registrations
        self._total_courses = total_courses

    @property
    def month_start(self):
        """
        Gets the month_start of this ReportageAccountInfoUsageSchema.

        :return: The month_start of this ReportageAccountInfoUsageSchema.
        :rtype: datetime
        """
        return self._month_start

    @month_start.setter
    def month_start(self, month_start):
        """
        Sets the month_start of this ReportageAccountInfoUsageSchema.

        :param month_start: The month_start of this ReportageAccountInfoUsageSchema.
        :type: datetime
        """

        self._month_start = month_start

    @property
    def reg_count(self):
        """
        Gets the reg_count of this ReportageAccountInfoUsageSchema.

        :return: The reg_count of this ReportageAccountInfoUsageSchema.
        :rtype: int
        """
        return self._reg_count

    @reg_count.setter
    def reg_count(self, reg_count):
        """
        Sets the reg_count of this ReportageAccountInfoUsageSchema.

        :param reg_count: The reg_count of this ReportageAccountInfoUsageSchema.
        :type: int
        """

        self._reg_count = reg_count

    @property
    def total_registrations(self):
        """
        Gets the total_registrations of this ReportageAccountInfoUsageSchema.

        :return: The total_registrations of this ReportageAccountInfoUsageSchema.
        :rtype: int
        """
        return self._total_registrations

    @total_registrations.setter
    def total_registrations(self, total_registrations):
        """
        Sets the total_registrations of this ReportageAccountInfoUsageSchema.

        :param total_registrations: The total_registrations of this ReportageAccountInfoUsageSchema.
        :type: int
        """

        self._total_registrations = total_registrations

    @property
    def total_courses(self):
        """
        Gets the total_courses of this ReportageAccountInfoUsageSchema.

        :return: The total_courses of this ReportageAccountInfoUsageSchema.
        :rtype: int
        """
        return self._total_courses

    @total_courses.setter
    def total_courses(self, total_courses):
        """
        Sets the total_courses of this ReportageAccountInfoUsageSchema.

        :param total_courses: The total_courses of this ReportageAccountInfoUsageSchema.
        :type: int
        """

        self._total_courses = total_courses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportageAccountInfoUsageSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
