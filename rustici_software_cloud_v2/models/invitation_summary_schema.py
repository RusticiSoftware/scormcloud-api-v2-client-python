# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvitationSummarySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'course_id': 'str',
        'is_public': 'bool',
        'create_date': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'course_id': 'courseId',
        'is_public': 'isPublic',
        'create_date': 'createDate',
        'updated': 'updated'
    }

    def __init__(self, id=None, course_id=None, is_public=None, create_date=None, updated=None):  # noqa: E501
        """InvitationSummarySchema - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._course_id = None
        self._is_public = None
        self._create_date = None
        self._updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if course_id is not None:
            self.course_id = course_id
        if is_public is not None:
            self.is_public = is_public
        if create_date is not None:
            self.create_date = create_date
        if updated is not None:
            self.updated = updated

    @property
    def id(self):
        """Gets the id of this InvitationSummarySchema.  # noqa: E501

        The invitationId for this invitation.  # noqa: E501

        :return: The id of this InvitationSummarySchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvitationSummarySchema.

        The invitationId for this invitation.  # noqa: E501

        :param id: The id of this InvitationSummarySchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def course_id(self):
        """Gets the course_id of this InvitationSummarySchema.  # noqa: E501

        Course Id for this Invitation.  # noqa: E501

        :return: The course_id of this InvitationSummarySchema.  # noqa: E501
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this InvitationSummarySchema.

        Course Id for this Invitation.  # noqa: E501

        :param course_id: The course_id of this InvitationSummarySchema.  # noqa: E501
        :type: str
        """

        self._course_id = course_id

    @property
    def is_public(self):
        """Gets the is_public of this InvitationSummarySchema.  # noqa: E501

        Is the invitation Public or Private  # noqa: E501

        :return: The is_public of this InvitationSummarySchema.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this InvitationSummarySchema.

        Is the invitation Public or Private  # noqa: E501

        :param is_public: The is_public of this InvitationSummarySchema.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def create_date(self):
        """Gets the create_date of this InvitationSummarySchema.  # noqa: E501

        The create date for the invitation  # noqa: E501

        :return: The create_date of this InvitationSummarySchema.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this InvitationSummarySchema.

        The create date for the invitation  # noqa: E501

        :param create_date: The create_date of this InvitationSummarySchema.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def updated(self):
        """Gets the updated of this InvitationSummarySchema.  # noqa: E501

        :return: The updated of this InvitationSummarySchema.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this InvitationSummarySchema.

        :param updated: The updated of this InvitationSummarySchema.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationSummarySchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationSummarySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
