# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvitationJobStatusSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'errors': 'list[str]',
        'total': 'int',
        'processed': 'int'
    }

    attribute_map = {
        'status': 'status',
        'errors': 'errors',
        'total': 'total',
        'processed': 'processed'
    }

    def __init__(self, status=None, errors=None, total=None, processed=None):  # noqa: E501
        """InvitationJobStatusSchema - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._errors = None
        self._total = None
        self._processed = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = errors
        if total is not None:
            self.total = total
        if processed is not None:
            self.processed = processed

    @property
    def status(self):
        """Gets the status of this InvitationJobStatusSchema.  # noqa: E501

        The status of the job.  # noqa: E501

        allowed_values = ["STARTED", "CANCELLED", "COMPLETE", "ERROR"]  # noqa: E501

        :return: The status of this InvitationJobStatusSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvitationJobStatusSchema.

        The status of the job.  # noqa: E501

        allowed_values = ["STARTED", "CANCELLED", "COMPLETE", "ERROR"]  # noqa: E501

        :param status: The status of this InvitationJobStatusSchema.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this InvitationJobStatusSchema.  # noqa: E501

        An array containing any errors which occurred.  # noqa: E501

        :return: The errors of this InvitationJobStatusSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InvitationJobStatusSchema.

        An array containing any errors which occurred.  # noqa: E501

        :param errors: The errors of this InvitationJobStatusSchema.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def total(self):
        """Gets the total of this InvitationJobStatusSchema.  # noqa: E501

        The total number of private invitations to be sent.  # noqa: E501

        :return: The total of this InvitationJobStatusSchema.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InvitationJobStatusSchema.

        The total number of private invitations to be sent.  # noqa: E501

        :param total: The total of this InvitationJobStatusSchema.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def processed(self):
        """Gets the processed of this InvitationJobStatusSchema.  # noqa: E501

        The number of private invitations which have been sent.  # noqa: E501

        :return: The processed of this InvitationJobStatusSchema.  # noqa: E501
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this InvitationJobStatusSchema.

        The number of private invitations which have been sent.  # noqa: E501

        :param processed: The processed of this InvitationJobStatusSchema.  # noqa: E501
        :type: int
        """

        self._processed = processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvitationJobStatusSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationJobStatusSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
