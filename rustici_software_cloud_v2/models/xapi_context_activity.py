# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rustici_software_cloud_v2.models.xapi_activity import XapiActivity  # noqa: F401,E501


class XapiContextActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'list[XapiActivity]',
        'grouping': 'list[XapiActivity]',
        'category': 'list[XapiActivity]',
        'other': 'list[XapiActivity]'
    }

    attribute_map = {
        'parent': 'parent',
        'grouping': 'grouping',
        'category': 'category',
        'other': 'other'
    }

    def __init__(self, parent=None, grouping=None, category=None, other=None):  # noqa: E501
        """XapiContextActivity - a model defined in Swagger"""  # noqa: E501

        self._parent = None
        self._grouping = None
        self._category = None
        self._other = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        if grouping is not None:
            self.grouping = grouping
        if category is not None:
            self.category = category
        if other is not None:
            self.other = other

    @property
    def parent(self):
        """Gets the parent of this XapiContextActivity.  # noqa: E501


        :return: The parent of this XapiContextActivity.  # noqa: E501
        :rtype: list[XapiActivity]
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this XapiContextActivity.


        :param parent: The parent of this XapiContextActivity.  # noqa: E501
        :type: list[XapiActivity]
        """

        self._parent = parent

    @property
    def grouping(self):
        """Gets the grouping of this XapiContextActivity.  # noqa: E501


        :return: The grouping of this XapiContextActivity.  # noqa: E501
        :rtype: list[XapiActivity]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this XapiContextActivity.


        :param grouping: The grouping of this XapiContextActivity.  # noqa: E501
        :type: list[XapiActivity]
        """

        self._grouping = grouping

    @property
    def category(self):
        """Gets the category of this XapiContextActivity.  # noqa: E501


        :return: The category of this XapiContextActivity.  # noqa: E501
        :rtype: list[XapiActivity]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this XapiContextActivity.


        :param category: The category of this XapiContextActivity.  # noqa: E501
        :type: list[XapiActivity]
        """

        self._category = category

    @property
    def other(self):
        """Gets the other of this XapiContextActivity.  # noqa: E501


        :return: The other of this XapiContextActivity.  # noqa: E501
        :rtype: list[XapiActivity]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this XapiContextActivity.


        :param other: The other of this XapiContextActivity.  # noqa: E501
        :type: list[XapiActivity]
        """

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XapiContextActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XapiContextActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
