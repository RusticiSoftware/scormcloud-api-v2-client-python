# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class XapiContextActivity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, parent=None, grouping=None, category=None, other=None):
        """
        XapiContextActivity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'parent': 'list[XapiActivity]',
            'grouping': 'list[XapiActivity]',
            'category': 'list[XapiActivity]',
            'other': 'list[XapiActivity]'
        }

        self.attribute_map = {
            'parent': 'parent',
            'grouping': 'grouping',
            'category': 'category',
            'other': 'other'
        }

        self._parent = parent
        self._grouping = grouping
        self._category = category
        self._other = other

    @property
    def parent(self):
        """
        Gets the parent of this XapiContextActivity.

        :return: The parent of this XapiContextActivity.
        :rtype: list[XapiActivity]
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this XapiContextActivity.

        :param parent: The parent of this XapiContextActivity.
        :type: list[XapiActivity]
        """

        self._parent = parent

    @property
    def grouping(self):
        """
        Gets the grouping of this XapiContextActivity.

        :return: The grouping of this XapiContextActivity.
        :rtype: list[XapiActivity]
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """
        Sets the grouping of this XapiContextActivity.

        :param grouping: The grouping of this XapiContextActivity.
        :type: list[XapiActivity]
        """

        self._grouping = grouping

    @property
    def category(self):
        """
        Gets the category of this XapiContextActivity.

        :return: The category of this XapiContextActivity.
        :rtype: list[XapiActivity]
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this XapiContextActivity.

        :param category: The category of this XapiContextActivity.
        :type: list[XapiActivity]
        """

        self._category = category

    @property
    def other(self):
        """
        Gets the other of this XapiContextActivity.

        :return: The other of this XapiContextActivity.
        :rtype: list[XapiActivity]
        """
        return self._other

    @other.setter
    def other(self, other):
        """
        Sets the other of this XapiContextActivity.

        :param other: The other of this XapiContextActivity.
        :type: list[XapiActivity]
        """

        self._other = other

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, XapiContextActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
