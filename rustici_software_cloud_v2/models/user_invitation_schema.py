# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserInvitationSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, url=None, is_started=None, updated=None, registration_id=None, registration_report=None):
        """
        UserInvitationSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'url': 'str',
            'is_started': 'bool',
            'updated': 'datetime',
            'registration_id': 'str',
            'registration_report': 'UserInvitationSchemaRegistrationReport'
        }

        self.attribute_map = {
            'email': 'email',
            'url': 'url',
            'is_started': 'isStarted',
            'updated': 'updated',
            'registration_id': 'registrationId',
            'registration_report': 'registrationReport'
        }

        self._email = email
        self._url = url
        self._is_started = is_started
        self._updated = updated
        self._registration_id = registration_id
        self._registration_report = registration_report

    @property
    def email(self):
        """
        Gets the email of this UserInvitationSchema.
        The email of the user who took an invitation.

        :return: The email of this UserInvitationSchema.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserInvitationSchema.
        The email of the user who took an invitation.

        :param email: The email of this UserInvitationSchema.
        :type: str
        """

        self._email = email

    @property
    def url(self):
        """
        Gets the url of this UserInvitationSchema.
        The URL which the user would follow to take the invitation.

        :return: The url of this UserInvitationSchema.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this UserInvitationSchema.
        The URL which the user would follow to take the invitation.

        :param url: The url of this UserInvitationSchema.
        :type: str
        """

        self._url = url

    @property
    def is_started(self):
        """
        Gets the is_started of this UserInvitationSchema.
        A boolean flag stating if the user has started the invitation.

        :return: The is_started of this UserInvitationSchema.
        :rtype: bool
        """
        return self._is_started

    @is_started.setter
    def is_started(self, is_started):
        """
        Sets the is_started of this UserInvitationSchema.
        A boolean flag stating if the user has started the invitation.

        :param is_started: The is_started of this UserInvitationSchema.
        :type: bool
        """

        self._is_started = is_started

    @property
    def updated(self):
        """
        Gets the updated of this UserInvitationSchema.

        :return: The updated of this UserInvitationSchema.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this UserInvitationSchema.

        :param updated: The updated of this UserInvitationSchema.
        :type: datetime
        """

        self._updated = updated

    @property
    def registration_id(self):
        """
        Gets the registration_id of this UserInvitationSchema.
        The id of the registration which was created from the user being invited.

        :return: The registration_id of this UserInvitationSchema.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """
        Sets the registration_id of this UserInvitationSchema.
        The id of the registration which was created from the user being invited.

        :param registration_id: The registration_id of this UserInvitationSchema.
        :type: str
        """

        self._registration_id = registration_id

    @property
    def registration_report(self):
        """
        Gets the registration_report of this UserInvitationSchema.

        :return: The registration_report of this UserInvitationSchema.
        :rtype: UserInvitationSchemaRegistrationReport
        """
        return self._registration_report

    @registration_report.setter
    def registration_report(self, registration_report):
        """
        Sets the registration_report of this UserInvitationSchema.

        :param registration_report: The registration_report of this UserInvitationSchema.
        :type: UserInvitationSchemaRegistrationReport
        """

        self._registration_report = registration_report

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserInvitationSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
