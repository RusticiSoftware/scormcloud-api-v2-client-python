# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PreviewLaunchLinkRequestSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiry': 'int',
        'redirect_on_exit_url': 'str',
        'start_sco': 'str',
        'culture': 'str',
        'css_url': 'str',
        'additionalvalues': 'list[ItemValuePairSchema]'
    }

    attribute_map = {
        'expiry': 'expiry',
        'redirect_on_exit_url': 'redirectOnExitUrl',
        'start_sco': 'startSco',
        'culture': 'culture',
        'css_url': 'cssUrl',
        'additionalvalues': 'additionalvalues'
    }

    def __init__(self, expiry=120, redirect_on_exit_url=None, start_sco=None, culture=None, css_url=None, additionalvalues=None):  # noqa: E501
        """PreviewLaunchLinkRequestSchema - a model defined in Swagger"""  # noqa: E501

        self._expiry = None
        self._redirect_on_exit_url = None
        self._start_sco = None
        self._culture = None
        self._css_url = None
        self._additionalvalues = None
        self.discriminator = None

        if expiry is not None:
            self.expiry = expiry
        if redirect_on_exit_url is not None:
            self.redirect_on_exit_url = redirect_on_exit_url
        if start_sco is not None:
            self.start_sco = start_sco
        if culture is not None:
            self.culture = culture
        if css_url is not None:
            self.css_url = css_url
        if additionalvalues is not None:
            self.additionalvalues = additionalvalues

    @property
    def expiry(self):
        """Gets the expiry of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        Number of seconds from now this link will expire in. Defaults to 120s. Range 10s:300s  # noqa: E501

        :return: The expiry of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this PreviewLaunchLinkRequestSchema.

        Number of seconds from now this link will expire in. Defaults to 120s. Range 10s:300s  # noqa: E501

        :param expiry: The expiry of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: int
        """

        self._expiry = expiry

    @property
    def redirect_on_exit_url(self):
        """Gets the redirect_on_exit_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        The URL the application should redirect to when the learner exits a course.  Alternatively one of the following keywords can be used to redirect to: - `closer` - A page that automatically tries to close the browser tab/window - `blank` - A blank page - `message` - A page with a message about the course being complete  If an empty string is specified, the configured setting will be used (default www.scorm.com). If an invalid url is specified, the Message.html page will be loaded.   # noqa: E501

        :return: The redirect_on_exit_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._redirect_on_exit_url

    @redirect_on_exit_url.setter
    def redirect_on_exit_url(self, redirect_on_exit_url):
        """Sets the redirect_on_exit_url of this PreviewLaunchLinkRequestSchema.

        The URL the application should redirect to when the learner exits a course.  Alternatively one of the following keywords can be used to redirect to: - `closer` - A page that automatically tries to close the browser tab/window - `blank` - A blank page - `message` - A page with a message about the course being complete  If an empty string is specified, the configured setting will be used (default www.scorm.com). If an invalid url is specified, the Message.html page will be loaded.   # noqa: E501

        :param redirect_on_exit_url: The redirect_on_exit_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: str
        """

        self._redirect_on_exit_url = redirect_on_exit_url

    @property
    def start_sco(self):
        """Gets the start_sco of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        For SCORM, SCO identifier to override launch, overriding the normal sequencing.  # noqa: E501

        :return: The start_sco of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._start_sco

    @start_sco.setter
    def start_sco(self, start_sco):
        """Sets the start_sco of this PreviewLaunchLinkRequestSchema.

        For SCORM, SCO identifier to override launch, overriding the normal sequencing.  # noqa: E501

        :param start_sco: The start_sco of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: str
        """

        self._start_sco = start_sco

    @property
    def culture(self):
        """Gets the culture of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        This parameter should specify a culture code. If specified, and supported, the navigation and alerts in the player will be displayed in the associated language. If not specified, the locale of the user’s browser will be used.  # noqa: E501

        :return: The culture of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this PreviewLaunchLinkRequestSchema.

        This parameter should specify a culture code. If specified, and supported, the navigation and alerts in the player will be displayed in the associated language. If not specified, the locale of the user’s browser will be used.  # noqa: E501

        :param culture: The culture of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: str
        """

        self._culture = culture

    @property
    def css_url(self):
        """Gets the css_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        A url pointing to custom CSS for the player to use.  # noqa: E501

        :return: The css_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._css_url

    @css_url.setter
    def css_url(self, css_url):
        """Sets the css_url of this PreviewLaunchLinkRequestSchema.

        A url pointing to custom CSS for the player to use.  # noqa: E501

        :param css_url: The css_url of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: str
        """

        self._css_url = css_url

    @property
    def additionalvalues(self):
        """Gets the additionalvalues of this PreviewLaunchLinkRequestSchema.  # noqa: E501

        :return: The additionalvalues of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :rtype: list[ItemValuePairSchema]
        """
        return self._additionalvalues

    @additionalvalues.setter
    def additionalvalues(self, additionalvalues):
        """Sets the additionalvalues of this PreviewLaunchLinkRequestSchema.

        :param additionalvalues: The additionalvalues of this PreviewLaunchLinkRequestSchema.  # noqa: E501
        :type: list[ItemValuePairSchema]
        """

        self._additionalvalues = additionalvalues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewLaunchLinkRequestSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewLaunchLinkRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
