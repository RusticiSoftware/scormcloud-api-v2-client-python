# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CredentialCreatedSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, credential=None, pens_credential=None, status=None):
        """
        CredentialCreatedSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'credential': 'str',
            'pens_credential': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'credential': 'credential',
            'pens_credential': 'pensCredential',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._credential = credential
        self._pens_credential = pens_credential
        self._status = status

    @property
    def id(self):
        """
        Gets the id of this CredentialCreatedSchema.
        id for this credential

        :return: The id of this CredentialCreatedSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CredentialCreatedSchema.
        id for this credential

        :param id: The id of this CredentialCreatedSchema.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CredentialCreatedSchema.
        name for this credential

        :return: The name of this CredentialCreatedSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CredentialCreatedSchema.
        name for this credential

        :param name: The name of this CredentialCreatedSchema.
        :type: str
        """

        self._name = name

    @property
    def credential(self):
        """
        Gets the credential of this CredentialCreatedSchema.
        The newly created API credential

        :return: The credential of this CredentialCreatedSchema.
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this CredentialCreatedSchema.
        The newly created API credential

        :param credential: The credential of this CredentialCreatedSchema.
        :type: str
        """

        self._credential = credential

    @property
    def pens_credential(self):
        """
        Gets the pens_credential of this CredentialCreatedSchema.
        The PENS key for this credential

        :return: The pens_credential of this CredentialCreatedSchema.
        :rtype: str
        """
        return self._pens_credential

    @pens_credential.setter
    def pens_credential(self, pens_credential):
        """
        Sets the pens_credential of this CredentialCreatedSchema.
        The PENS key for this credential

        :param pens_credential: The pens_credential of this CredentialCreatedSchema.
        :type: str
        """

        self._pens_credential = pens_credential

    @property
    def status(self):
        """
        Gets the status of this CredentialCreatedSchema.


        :return: The status of this CredentialCreatedSchema.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CredentialCreatedSchema.


        :param status: The status of this CredentialCreatedSchema.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
