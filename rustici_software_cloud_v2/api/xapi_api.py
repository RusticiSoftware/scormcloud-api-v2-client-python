# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rustici_software_cloud_v2.api_client import ApiClient


class XapiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_statement_pipe(self, xapi_statement_pipe, **kwargs):  # noqa: E501
        """Create an xAPI statement pipe.  # noqa: E501

        Create an xAPI statement pipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_statement_pipe(xapi_statement_pipe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XapiStatementPipePostSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_statement_pipe_with_http_info(xapi_statement_pipe, **kwargs)  # noqa: E501
        else:
            (data) = self.create_statement_pipe_with_http_info(xapi_statement_pipe, **kwargs)  # noqa: E501
            return data

    def create_statement_pipe_with_http_info(self, xapi_statement_pipe, **kwargs):  # noqa: E501
        """Create an xAPI statement pipe.  # noqa: E501

        Create an xAPI statement pipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_statement_pipe_with_http_info(xapi_statement_pipe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XapiStatementPipePostSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_statement_pipe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_statement_pipe' is set
        if ('xapi_statement_pipe' not in params or
                params['xapi_statement_pipe'] is None):
            raise ValueError("Missing the required parameter `xapi_statement_pipe` when calling `create_statement_pipe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_statement_pipe' in params:
            body_params = params['xapi_statement_pipe']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/statementPipes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_xapi_credential(self, xapi_credential, **kwargs):  # noqa: E501
        """Create a xAPI credential.  # noqa: E501

        Create a xAPI credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_xapi_credential(xapi_credential, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_xapi_credential_with_http_info(xapi_credential, **kwargs)  # noqa: E501
        else:
            (data) = self.create_xapi_credential_with_http_info(xapi_credential, **kwargs)  # noqa: E501
            return data

    def create_xapi_credential_with_http_info(self, xapi_credential, **kwargs):  # noqa: E501
        """Create a xAPI credential.  # noqa: E501

        Create a xAPI credential.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_xapi_credential_with_http_info(xapi_credential, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential' is set
        if ('xapi_credential' not in params or
                params['xapi_credential'] is None):
            raise ValueError("Missing the required parameter `xapi_credential` when calling `create_xapi_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_credential' in params:
            body_params = params['xapi_credential']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/credentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_statement_pipe(self, statement_pipe_id, **kwargs):  # noqa: E501
        """Deletes this xAPI pipe.  # noqa: E501

        Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement_pipe(statement_pipe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_statement_pipe_with_http_info(statement_pipe_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_statement_pipe_with_http_info(statement_pipe_id, **kwargs)  # noqa: E501
            return data

    def delete_statement_pipe_with_http_info(self, statement_pipe_id, **kwargs):  # noqa: E501
        """Deletes this xAPI pipe.  # noqa: E501

        Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statement_pipe_with_http_info(statement_pipe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params or
                params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `delete_statement_pipe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/statementPipes/{statementPipeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_xapi_credential(self, xapi_credential_id, **kwargs):  # noqa: E501
        """Deletes the xAPI credentials specified by the xAPI credentials id  # noqa: E501

        Deletes the xAPI credentials specified by the xAPI credentials id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_xapi_credential(xapi_credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_xapi_credential_with_http_info(xapi_credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_xapi_credential_with_http_info(xapi_credential_id, **kwargs)  # noqa: E501
            return data

    def delete_xapi_credential_with_http_info(self, xapi_credential_id, **kwargs):  # noqa: E501
        """Deletes the xAPI credentials specified by the xAPI credentials id  # noqa: E501

        Deletes the xAPI credentials specified by the xAPI credentials id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_xapi_credential_with_http_info(xapi_credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params or
                params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `delete_xapi_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/credentials/{xapiCredentialId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_pipe(self, statement_pipe_id, **kwargs):  # noqa: E501
        """Retrieves xAPI pipe for `xapiPipeId`  # noqa: E501

        Retrieves xAPI pipe for `xapiPipeId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_pipe(statement_pipe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: XapiStatementPipeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_pipe_with_http_info(statement_pipe_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_pipe_with_http_info(statement_pipe_id, **kwargs)  # noqa: E501
            return data

    def get_statement_pipe_with_http_info(self, statement_pipe_id, **kwargs):  # noqa: E501
        """Retrieves xAPI pipe for `xapiPipeId`  # noqa: E501

        Retrieves xAPI pipe for `xapiPipeId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_pipe_with_http_info(statement_pipe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: XapiStatementPipeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params or
                params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `get_statement_pipe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/statementPipes/{statementPipeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementPipeSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statement_pipes(self, **kwargs):  # noqa: E501
        """Get all of the xapiPipes for `appId`  # noqa: E501

        Get all of the xapiPipes for `appId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_pipes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: XapiStatementPipeListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statement_pipes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_statement_pipes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_statement_pipes_with_http_info(self, **kwargs):  # noqa: E501
        """Get all of the xapiPipes for `appId`  # noqa: E501

        Get all of the xapiPipes for `appId`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statement_pipes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: XapiStatementPipeListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_pipes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/statementPipes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementPipeListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xapi_credential(self, xapi_credential_id, **kwargs):  # noqa: E501
        """Retrieves the xAPI credentials specified by the xAPI credentials id.  # noqa: E501

        Retrieves the xAPI credentials specified by the xAPI credentials id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xapi_credential(xapi_credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: XapiCredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_xapi_credential_with_http_info(xapi_credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_xapi_credential_with_http_info(xapi_credential_id, **kwargs)  # noqa: E501
            return data

    def get_xapi_credential_with_http_info(self, xapi_credential_id, **kwargs):  # noqa: E501
        """Retrieves the xAPI credentials specified by the xAPI credentials id.  # noqa: E501

        Retrieves the xAPI credentials specified by the xAPI credentials id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xapi_credential_with_http_info(xapi_credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: XapiCredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params or
                params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `get_xapi_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/credentials/{xapiCredentialId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiCredentialSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xapi_credentials(self, **kwargs):  # noqa: E501
        """Get the list of xapiCredentials  # noqa: E501

        Get the list of xapiCredentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xapi_credentials(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime since: Only <<resourcePathName>> updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of <<resourcePathName>> lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiCredentialsListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_xapi_credentials_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_xapi_credentials_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_xapi_credentials_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of xapiCredentials  # noqa: E501

        Get the list of xapiCredentials  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xapi_credentials_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime since: Only <<resourcePathName>> updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of <<resourcePathName>> lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiCredentialsListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['since', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xapi_credentials" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiCredentialsListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_statement_pipe(self, statement_pipe_id, xapi_statement_pipe, **kwargs):  # noqa: E501
        """Edit an existing xAPI pipe or create a new one.  # noqa: E501

        Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_statement_pipe(statement_pipe_id, xapi_statement_pipe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :param XapiStatementPipePutSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, **kwargs)  # noqa: E501
        else:
            (data) = self.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, **kwargs)  # noqa: E501
            return data

    def set_statement_pipe_with_http_info(self, statement_pipe_id, xapi_statement_pipe, **kwargs):  # noqa: E501
        """Edit an existing xAPI pipe or create a new one.  # noqa: E501

        Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :param XapiStatementPipePutSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id', 'xapi_statement_pipe']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params or
                params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `set_statement_pipe`")  # noqa: E501
        # verify the required parameter 'xapi_statement_pipe' is set
        if ('xapi_statement_pipe' not in params or
                params['xapi_statement_pipe'] is None):
            raise ValueError("Missing the required parameter `xapi_statement_pipe` when calling `set_statement_pipe`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_statement_pipe' in params:
            body_params = params['xapi_statement_pipe']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/statementPipes/{statementPipeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_xapi_credential(self, xapi_credential_id, xapi_credential, **kwargs):  # noqa: E501
        """Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id  # noqa: E501

        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_xapi_credential(xapi_credential_id, xapi_credential, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, **kwargs)  # noqa: E501
        else:
            (data) = self.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, **kwargs)  # noqa: E501
            return data

    def set_xapi_credential_with_http_info(self, xapi_credential_id, xapi_credential, **kwargs):  # noqa: E501
        """Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id  # noqa: E501

        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xapi_credential_id: id for this xAPI credential (required)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id', 'xapi_credential']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params or
                params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `set_xapi_credential`")  # noqa: E501
        # verify the required parameter 'xapi_credential' is set
        if ('xapi_credential' not in params or
                params['xapi_credential'] is None):
            raise ValueError("Missing the required parameter `xapi_credential` when calling `set_xapi_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_credential' in params:
            body_params = params['xapi_credential']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/xapi/credentials/{xapiCredentialId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
