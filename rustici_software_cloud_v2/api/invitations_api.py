# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rustici_software_cloud_v2.api_client import ApiClient


class InvitationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_private_invitation(self, private_invitation_request, **kwargs):  # noqa: E501
        """Create a private invitation to a course.  # noqa: E501

        Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to `/invitations/private/{invitationId}/status` must be made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_private_invitation(private_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePrivateInvitationSchema private_invitation_request:  (required)
        :return: InvitationSummarySchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_private_invitation_with_http_info(private_invitation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_private_invitation_with_http_info(private_invitation_request, **kwargs)  # noqa: E501
            return data

    def create_private_invitation_with_http_info(self, private_invitation_request, **kwargs):  # noqa: E501
        """Create a private invitation to a course.  # noqa: E501

        Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to `/invitations/private/{invitationId}/status` must be made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_private_invitation_with_http_info(private_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePrivateInvitationSchema private_invitation_request:  (required)
        :return: InvitationSummarySchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['private_invitation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'private_invitation_request' is set
        if ('private_invitation_request' not in params or
                params['private_invitation_request'] is None):
            raise ValueError("Missing the required parameter `private_invitation_request` when calling `create_private_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_invitation_request' in params:
            body_params = params['private_invitation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationSummarySchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_public_invitation(self, public_invitation_request, **kwargs):  # noqa: E501
        """Create a publicly accessible invitation to a course.  # noqa: E501

        Create a publicly accessible invitation to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_public_invitation(public_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePublicInvitationSchema public_invitation_request: A description of the public invitation to be created. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_public_invitation_with_http_info(public_invitation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_public_invitation_with_http_info(public_invitation_request, **kwargs)  # noqa: E501
            return data

    def create_public_invitation_with_http_info(self, public_invitation_request, **kwargs):  # noqa: E501
        """Create a publicly accessible invitation to a course.  # noqa: E501

        Create a publicly accessible invitation to a course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_public_invitation_with_http_info(public_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePublicInvitationSchema public_invitation_request: A description of the public invitation to be created. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_invitation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_invitation_request' is set
        if ('public_invitation_request' not in params or
                params['public_invitation_request'] is None):
            raise ValueError("Missing the required parameter `public_invitation_request` when calling `create_public_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'public_invitation_request' in params:
            body_params = params['public_invitation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/public', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicInvitationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_invitation_tags(self, invitation_id, tags, **kwargs):  # noqa: E501
        """Delete the tags for this invitation   # noqa: E501

        Delete the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_invitation_tags(invitation_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_invitation_tags_with_http_info(invitation_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_invitation_tags_with_http_info(invitation_id, tags, **kwargs)  # noqa: E501
            return data

    def delete_invitation_tags_with_http_info(self, invitation_id, tags, **kwargs):  # noqa: E501
        """Delete the tags for this invitation   # noqa: E501

        Delete the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_invitation_tags_with_http_info(invitation_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `delete_invitation_tags`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `delete_invitation_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitationId}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_invitations(self, **kwargs):  # noqa: E501
        """Get a list of invitation summaries.  # noqa: E501

        Get a summary of all the invitations for an appId, both public and private.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invitations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: InvitationSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_invitations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_invitations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_invitations_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of invitation summaries.  # noqa: E501

        Get a summary of all the invitations for an appId, both public and private.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_invitations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: InvitationSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invitations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'datetime_filter' in params:
            query_params.append(('datetimeFilter', params['datetime_filter']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_invitation_tags(self, invitation_id, **kwargs):  # noqa: E501
        """Get the tags for this invitation   # noqa: E501

        Get the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invitation_tags(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_invitation_tags_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invitation_tags_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_invitation_tags_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get the tags for this invitation   # noqa: E501

        Get the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invitation_tags_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_invitation_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitationId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_private_invitation(self, invitation_id, **kwargs):  # noqa: E501
        """Get a information about a private invitation.  # noqa: E501

        Get a information about a private invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitation(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_private_invitation_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_private_invitation_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_private_invitation_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get a information about a private invitation.  # noqa: E501

        Get a information about a private invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitation_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'include_registration_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []
        if 'include_registration_count' in params:
            query_params.append(('includeRegistrationCount', params['include_registration_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private/{invitationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateInvitationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_private_invitation_job_status(self, invitation_id, **kwargs):  # noqa: E501
        """Get the status of an invitation job.  # noqa: E501

        Get the status of a job to send out private invitations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitation_job_status(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :return: InvitationJobStatusSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_private_invitation_job_status_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_private_invitation_job_status_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_private_invitation_job_status_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get the status of an invitation job.  # noqa: E501

        Get the status of a job to send out private invitations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitation_job_status_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :return: InvitationJobStatusSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitation_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_invitation_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private/{invitationId}/jobStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationJobStatusSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_private_invitations(self, **kwargs):  # noqa: E501
        """Get a list of all private invitations.  # noqa: E501

        Retrieves a list of all private invitations, optionally filtered by the given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PrivateInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_private_invitations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_private_invitations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_private_invitations_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all private invitations.  # noqa: E501

        Retrieves a list of all private invitations, optionally filtered by the given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_invitations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PrivateInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'datetime_filter' in params:
            query_params.append(('datetimeFilter', params['datetime_filter']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateInvitationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_private_user_invitations(self, invitation_id, **kwargs):  # noqa: E501
        """Get a list of user invitations.  # noqa: E501

        Get a list of objects which contain the specific information about each user to whom this invitation was sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_user_invitations(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_private_user_invitations_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_private_user_invitations_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_private_user_invitations_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get a list of user invitations.  # noqa: E501

        Get a list of objects which contain the specific information about each user to whom this invitation was sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_private_user_invitations_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'since', 'until', 'include_registration_report', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_user_invitations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_user_invitations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'include_registration_report' in params:
            query_params.append(('includeRegistrationReport', params['include_registration_report']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private/{invitationId}/userInvitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_invitation(self, invitation_id, **kwargs):  # noqa: E501
        """Get a information about a public invitation.  # noqa: E501

        Get a information about a public invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_invitation(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_invitation_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_invitation_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_public_invitation_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get a information about a public invitation.  # noqa: E501

        Get a information about a public invitation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_invitation_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'include_registration_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_public_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []
        if 'include_registration_count' in params:
            query_params.append(('includeRegistrationCount', params['include_registration_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/public/{invitationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicInvitationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_invitations(self, **kwargs):  # noqa: E501
        """Get a list of all public invitations.  # noqa: E501

        Retrieves a list of all public invitations, optionally filtered by the given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_invitations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PublicInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_invitations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_invitations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_invitations_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all public invitations.  # noqa: E501

        Retrieves a list of all public invitations, optionally filtered by the given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_invitations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PublicInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_invitations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'datetime_filter' in params:
            query_params.append(('datetimeFilter', params['datetime_filter']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/public', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicInvitationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_user_invitations(self, invitation_id, **kwargs):  # noqa: E501
        """Get a list of user invitations.  # noqa: E501

        Get a list of objects which contain the specific information about each user who visited the invitation link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_user_invitations(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_user_invitations_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_user_invitations_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def get_public_user_invitations_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """Get a list of user invitations.  # noqa: E501

        Get a list of objects which contain the specific information about each user who visited the invitation link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_user_invitations_with_http_info(invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'since', 'until', 'include_registration_report', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_user_invitations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_public_user_invitations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'include_registration_report' in params:
            query_params.append(('includeRegistrationReport', params['include_registration_report']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/public/{invitationId}/userInvitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInvitationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_invitation_tags(self, invitation_id, tags, **kwargs):  # noqa: E501
        """Set the tags for this invitation   # noqa: E501

        Set the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation_tags(invitation_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_invitation_tags_with_http_info(invitation_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.put_invitation_tags_with_http_info(invitation_id, tags, **kwargs)  # noqa: E501
            return data

    def put_invitation_tags_with_http_info(self, invitation_id, tags, **kwargs):  # noqa: E501
        """Set the tags for this invitation   # noqa: E501

        Set the tags for this invitation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation_tags_with_http_info(invitation_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `put_invitation_tags`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `put_invitation_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitationId}/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_invitation_tags_batch(self, batch, **kwargs):  # noqa: E501
        """Sets all of the provided tags on all of the provided invitations   # noqa: E501

        Sets all of the provided tags on all of the provided invitations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation_tags_batch(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_invitation_tags_batch_with_http_info(batch, **kwargs)  # noqa: E501
        else:
            (data) = self.put_invitation_tags_batch_with_http_info(batch, **kwargs)  # noqa: E501
            return data

    def put_invitation_tags_batch_with_http_info(self, batch, **kwargs):  # noqa: E501
        """Sets all of the provided tags on all of the provided invitations   # noqa: E501

        Sets all of the provided tags on all of the provided invitations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation_tags_batch_with_http_info(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_invitation_tags_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch' is set
        if ('batch' not in params or
                params['batch'] is None):
            raise ValueError("Missing the required parameter `batch` when calling `put_invitation_tags_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch' in params:
            body_params = params['batch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_private_invitation(self, invitation_id, invitation_update_schema, **kwargs):  # noqa: E501
        """Update attributes of this invitation.  # noqa: E501

        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_private_invitation(invitation_id, invitation_update_schema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param PrivateInvitationSchema invitation_update_schema: A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)  # noqa: E501
        else:
            (data) = self.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)  # noqa: E501
            return data

    def update_private_invitation_with_http_info(self, invitation_id, invitation_update_schema, **kwargs):  # noqa: E501
        """Update attributes of this invitation.  # noqa: E501

        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param PrivateInvitationSchema invitation_update_schema: A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'invitation_update_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `update_private_invitation`")  # noqa: E501
        # verify the required parameter 'invitation_update_schema' is set
        if ('invitation_update_schema' not in params or
                params['invitation_update_schema'] is None):
            raise ValueError("Missing the required parameter `invitation_update_schema` when calling `update_private_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation_update_schema' in params:
            body_params = params['invitation_update_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/private/{invitationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivateInvitationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_public_invitation(self, invitation_id, invitation_update_schema, **kwargs):  # noqa: E501
        """Update attributes of this invitation.  # noqa: E501

        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_public_invitation(invitation_id, invitation_update_schema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param PublicInvitationSchema invitation_update_schema: A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)  # noqa: E501
        else:
            (data) = self.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)  # noqa: E501
            return data

    def update_public_invitation_with_http_info(self, invitation_id, invitation_update_schema, **kwargs):  # noqa: E501
        """Update attributes of this invitation.  # noqa: E501

        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_id: invitation id (required)
        :param PublicInvitationSchema invitation_update_schema: A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'invitation_update_schema']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `update_public_invitation`")  # noqa: E501
        # verify the required parameter 'invitation_update_schema' is set
        if ('invitation_update_schema' not in params or
                params['invitation_update_schema'] is None):
            raise ValueError("Missing the required parameter `invitation_update_schema` when calling `update_public_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation_update_schema' in params:
            body_params = params['invitation_update_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/public/{invitationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PublicInvitationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
