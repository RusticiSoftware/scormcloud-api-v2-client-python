# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from deprecated import deprecated

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rustici_software_cloud_v2.api_client import ApiClient


class RegistrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def build_registration_launch_link(self, registration_id, launch_link_request, **kwargs):  # noqa: E501
        """Get a launch link for a Registration   # noqa: E501

        Returns the launch link to use to launch the course for the registration.   Launch links are meant as a way to provide access to your content.  When a learner visits the link, the course will be launched and registration progress will start to be tracked.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_registration_launch_link(registration_id, launch_link_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param LaunchLinkRequestSchema launch_link_request: (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.build_registration_launch_link_with_http_info(registration_id, launch_link_request, **kwargs)  # noqa: E501
        else:
            (data) = self.build_registration_launch_link_with_http_info(registration_id, launch_link_request, **kwargs)  # noqa: E501
            return data

    def build_registration_launch_link_with_http_info(self, registration_id, launch_link_request, **kwargs):  # noqa: E501
        """Get a launch link for a Registration   # noqa: E501

        Returns the launch link to use to launch the course for the registration.   Launch links are meant as a way to provide access to your content.  When a learner visits the link, the course will be launched and registration progress will start to be tracked.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_registration_launch_link_with_http_info(registration_id, launch_link_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param LaunchLinkRequestSchema launch_link_request: (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'launch_link_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_registration_launch_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `build_registration_launch_link`")  # noqa: E501
        # verify the required parameter 'launch_link_request' is set
        if ('launch_link_request' not in params or
                params['launch_link_request'] is None):
            raise ValueError("Missing the required parameter `launch_link_request` when calling `build_registration_launch_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'launch_link_request' in params:
            body_params = params['launch_link_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/launchLink', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchLinkSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_registration_instance(self, registration_id, **kwargs):  # noqa: E501
        """Create a Registration Instance   # noqa: E501

        Creates a new instance of the registration.  Registration instances will be automatically created when a learner launches a new version of the course.  This allows for tracking registration progress for each of the versions of the course the learner has taken.  When the created registration instance is \"launched\", the course specified at creation time will be launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_registration_instance(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_registration_instance_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_registration_instance_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def create_new_registration_instance_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Create a Registration Instance   # noqa: E501

        Creates a new instance of the registration.  Registration instances will be automatically created when a learner launches a new version of the course.  This allows for tracking registration progress for each of the versions of the course the learner has taken.  When the created registration instance is \"launched\", the course specified at creation time will be launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_registration_instance_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_registration_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `create_new_registration_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_registration(self, registration, **kwargs):  # noqa: E501
        """Create a Registration   # noqa: E501

        Creates a new registration.  Registrations are the billable unit in SCORM Cloud, and represent a link between a learner and a course.  A registration will contain a few pieces of information such as learner identifiers, the id of the course being registered for, and several other optional fields. A registration must be tied to a specific course at creation time.  When the created registration is \"launched\", the course specified at creation time will be launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registration(registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRegistrationSchema registration: (required)
        :param int course_version: Unless you have a reason for using this you probably do not need to. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_registration_with_http_info(registration, **kwargs)  # noqa: E501
        else:
            (data) = self.create_registration_with_http_info(registration, **kwargs)  # noqa: E501
            return data

    def create_registration_with_http_info(self, registration, **kwargs):  # noqa: E501
        """Create a Registration   # noqa: E501

        Creates a new registration.  Registrations are the billable unit in SCORM Cloud, and represent a link between a learner and a course.  A registration will contain a few pieces of information such as learner identifiers, the id of the course being registered for, and several other optional fields. A registration must be tied to a specific course at creation time.  When the created registration is \"launched\", the course specified at creation time will be launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registration_with_http_info(registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRegistrationSchema registration: (required)
        :param int course_version: Unless you have a reason for using this you probably do not need to. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration', 'course_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration' is set
        if ('registration' not in params or
                params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `create_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_version' in params:
            query_params.append(('courseVersion', params['course_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registration' in params:
            body_params = params['registration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration(self, registration_id, **kwargs):  # noqa: E501
        """Delete a Registration   # noqa: E501

        Deletes the specified registration.  >**Caution:** >This will also delete all instances of the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Delete a Registration   # noqa: E501

        Deletes the specified registration.  >**Caution:** >This will also delete all instances of the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_configuration_setting(self, registration_id, setting_id, **kwargs):  # noqa: E501
        """Delete a configuration setting explicitly set for a Registration   # noqa: E501

        Clears the specified setting from the registration.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_configuration_setting(registration_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_configuration_setting_with_http_info(self, registration_id, setting_id, **kwargs):  # noqa: E501
        """Delete a configuration setting explicitly set for a Registration   # noqa: E501

        Clears the specified setting from the registration.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_configuration_setting`")  # noqa: E501
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_configuration_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_global_data(self, registration_id, **kwargs):  # noqa: E501
        """Reset global data for a Registration   # noqa: E501

        Deletes the global data associated with the registration, but the registration itself will remain.  This means any progress towards the global objectives will be removed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_global_data(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_global_data_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_global_data_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_global_data_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Reset global data for a Registration   # noqa: E501

        Deletes the global data associated with the registration, but the registration itself will remain.  This means any progress towards the global objectives will be removed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_global_data_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_global_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_global_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/globalData', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_instance(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Delete a Registration Instance   # noqa: E501

        Deletes the specified instance of the registration.  If deleting the last remaining instance of the registration, the registration itself will be deleted along with any associated data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_instance_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_instance_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_instance_with_http_info(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Delete a Registration Instance   # noqa: E501

        Deletes the specified instance of the registration.  If deleting the last remaining instance of the registration, the registration itself will be deleted along with any associated data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_with_http_info(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_instance`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_registration_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_instance_configuration_setting(self, registration_id, instance_id, setting_id, **kwargs):  # noqa: E501
        """Delete a configuration setting explicitly set for a Registration Instance   # noqa: E501

        Clears the specified setting from the registration instance.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_configuration_setting(registration_id, instance_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_instance_configuration_setting_with_http_info(self, registration_id, instance_id, setting_id, **kwargs):  # noqa: E501
        """Delete a configuration setting explicitly set for a Registration Instance   # noqa: E501

        Clears the specified setting from the registration instance.  This causes the setting to inherit a value from a higher level (e.g. course).  If the configuration setting was not set at the registration level it will continue to persist and will require deletion from the level it was set.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_instance_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_progress(self, registration_id, **kwargs):  # noqa: E501
        """Reset a Registration   # noqa: E501

        Deletes the data associated with the registration, but the registration itself will remain.  This means any of the launch history, and progress will be removed.  After the data has been deleted, the registration will automatically register itself for the latest version of the course.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_progress(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_progress_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_progress_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_progress_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Reset a Registration   # noqa: E501

        Deletes the data associated with the registration, but the registration itself will remain.  This means any of the launch history, and progress will be removed.  After the data has been deleted, the registration will automatically register itself for the latest version of the course.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_progress_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/progress', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_tags(self, registration_id, tags, **kwargs):  # noqa: E501
        """Delete tags from a Registration   # noqa: E501

        Deletes the specified tags from the registration.  Deleting tags that do not exist will still result in a success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_tags(registration_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_tags_with_http_info(registration_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_tags_with_http_info(registration_id, tags, **kwargs)  # noqa: E501
            return data

    def delete_registration_tags_with_http_info(self, registration_id, tags, **kwargs):  # noqa: E501
        """Delete tags from a Registration   # noqa: E501

        Deletes the specified tags from the registration.  Deleting tags that do not exist will still result in a success.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_tags_with_http_info(registration_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_tags`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `delete_registration_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration(self, registration_id, **kwargs):  # noqa: E501
        """Check that a Registration exists   # noqa: E501

        Checks that the registration exists within SCORM Cloud.  >**Info:** >No registration data will be returned for this call. A successful `200` response indicates that the registration exists. If the registration does not exist, a `404` error will be returned instead. If you are looking for information about the registration, try calling `GetRegistrationProgress` instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Check that a Registration exists   # noqa: E501

        Checks that the registration exists within SCORM Cloud.  >**Info:** >No registration data will be returned for this call. A successful `200` response indicates that the registration exists. If the registration does not exist, a `404` error will be returned instead. If you are looking for information about the registration, try calling `GetRegistrationProgress` instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_configuration(self, registration_id, **kwargs):  # noqa: E501
        """Get effective configuration settings for a Registration   # noqa: E501

        Returns the effective configuration settings for the registration.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_configuration(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_configuration_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_configuration_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_configuration_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get effective configuration settings for a Registration   # noqa: E501

        Returns the effective configuration settings for the registration.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_configuration_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_metadata' in params:
            query_params.append(('includeMetadata', params['include_metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_configuration(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get effective configuration settings for a Registration Instance   # noqa: E501

        Returns the effective configuration settings for the registration instance.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_configuration(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_configuration_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_configuration_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_configuration_with_http_info(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get effective configuration settings for a Registration Instance   # noqa: E501

        Returns the effective configuration settings for the registration instance.  If not set at the registration level, the setting will inherit a value from a higher level (e.g. course).  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_configuration_with_http_info(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_metadata' in params:
            query_params.append(('includeMetadata', params['include_metadata']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_launch_history(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get launch history for a Registration Instance   # noqa: E501

        Returns the launch history of the registration instance.  This includes completion status, time taken, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_launch_history(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_launch_history_with_http_info(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get launch history for a Registration Instance   # noqa: E501

        Returns the launch history of the registration instance.  This includes completion status, time taken, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_history_log']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_launch_history`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_launch_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_history_log' in params:
            query_params.append(('includeHistoryLog', params['include_history_log']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/launchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchHistoryListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_progress(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get detailed information about a Registration Instance   # noqa: E501

        Returns detailed information about the registration instance.  This includes completion status, time taken, score, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_progress(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_progress_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_progress_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_progress_with_http_info(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get detailed information about a Registration Instance   # noqa: E501

        Returns detailed information about the registration instance.  This includes completion status, time taken, score, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_progress_with_http_info(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_progress`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_statements(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get xAPI statements for a Registration Instance   # noqa: E501

        Returns xAPI statements for the registration instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_statements(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_statements_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_statements_with_http_info(registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_statements_with_http_info(self, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get xAPI statements for a Registration Instance   # noqa: E501

        Returns xAPI statements for the registration instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_statements_with_http_info(registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'since', 'until', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_statements`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instances(self, registration_id, **kwargs):  # noqa: E501
        """Get a list of a Registration's Instances   # noqa: E501

        Returns information about all instances of the registration.  This can be useful to see information such as registration progress across versions of a course.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instances(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instances_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instances_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instances_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get a list of a Registration's Instances   # noqa: E501

        Returns information about all instances of the registration.  This can be useful to see information such as registration progress across versions of a course.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instances_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'until', 'since', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_launch_history(self, registration_id, **kwargs):  # noqa: E501
        """Get launch history for a Registration   # noqa: E501

        Returns the launch history of the registration.  This includes completion status, time taken, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_launch_history(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_launch_history_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_launch_history_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_launch_history_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get launch history for a Registration   # noqa: E501

        Returns the launch history of the registration.  This includes completion status, time taken, and pass/fail status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_launch_history_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_history_log']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_launch_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_history_log' in params:
            query_params.append(('includeHistoryLog', params['include_history_log']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/launchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchHistoryListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_progress(self, registration_id, **kwargs):  # noqa: E501
        """Get detailed information about a Registration   # noqa: E501

        Returns detailed information about the registration.  This includes completion status, time taken, score, and pass/fail status.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_progress(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_progress_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_progress_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_progress_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get detailed information about a Registration   # noqa: E501

        Returns detailed information about the registration.  This includes completion status, time taken, score, and pass/fail status.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_progress_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_statements(self, registration_id, **kwargs):  # noqa: E501
        """Get xAPI statements for a Registration   # noqa: E501

        Returns xAPI statements for the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_statements(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_statements_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_statements_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_statements_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get xAPI statements for a Registration   # noqa: E501

        Returns xAPI statements for the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_statements_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str more: Pagination token returned as `more` property of multi page list requests
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'since', 'until', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/xAPIStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_tags(self, registration_id, **kwargs):  # noqa: E501
        """Get tags for a Registration   # noqa: E501

        Returns the tags for the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_tags(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_tags_with_http_info(registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_tags_with_http_info(registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_tags_with_http_info(self, registration_id, **kwargs):  # noqa: E501
        """Get tags for a Registration   # noqa: E501

        Returns the tags for the registration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_tags_with_http_info(registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registrations(self, **kwargs):  # noqa: E501
        """Get a list of Registrations   # noqa: E501

        Returns a list of registrations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Only retrieve resources having `courseId`
        :param str learner_id: Only retrieve resources having `learnerId`
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str datetime_filter: Specifies field that `since` and `until` parameters are applied against
        :param list[str] tags: Filter items matching any tag provided (not all)
        :param str filter: Optional string which filters results by a specified field (described by filterBy).
        :param str filter_by: Optional enum parameter for specifying the field on which to run the filter. 
        :param str order_by: Optional enum parameter for specifying the field and order by which to sort the results. 
        :param str more: Pagination token returned as `more` property of multi page list requests
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool include_total_count: Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the `more` token. 
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registrations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_registrations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_registrations_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of Registrations   # noqa: E501

        Returns a list of registrations.  Can be filtered using the request parameters to provide a subset of results.  >**Note:** >This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a `more` token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request.  >**Info:** >If you find yourself making multiple calls to this endpoint, it may be worthwhile to utilize our [postback mechanism](https://cloud.scorm.com/docs/v2/guides/postback/) instead.  The main premise is that you would set up an endpoint on your end, and when we detect a change to the registration progress: completion status, time taken, score, or pass/fail status, we would send a message to your system with the registration progress.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Only retrieve resources having `courseId`
        :param str learner_id: Only retrieve resources having `learnerId`
        :param datetime since: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param datetime until: Filter by ISO 8601 TimeStamp inclusive (defaults to UTC)
        :param str datetime_filter: Specifies field that `since` and `until` parameters are applied against
        :param list[str] tags: Filter items matching any tag provided (not all)
        :param str filter: Optional string which filters results by a specified field (described by filterBy).
        :param str filter_by: Optional enum parameter for specifying the field on which to run the filter. 
        :param str order_by: Optional enum parameter for specifying the field and order by which to sort the results. 
        :param str more: Pagination token returned as `more` property of multi page list requests
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool include_total_count: Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the `more` token. 
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'learner_id', 'since', 'until', 'datetime_filter', 'tags', 'filter', 'filter_by', 'order_by', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime', 'include_total_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registrations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501
        if 'learner_id' in params:
            query_params.append(('learnerId', params['learner_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'datetime_filter' in params:
            query_params.append(('datetimeFilter', params['datetime_filter']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'filter_by' in params:
            query_params.append(('filterBy', params['filter_by']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501
        if 'include_total_count' in params:
            query_params.append(('includeTotalCount', params['include_total_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_registration_tags(self, registration_id, tags, **kwargs):  # noqa: E501
        """Add tags to a Registration   # noqa: E501

        Applies the provided tags to the registration.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration_tags(registration_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_registration_tags_with_http_info(registration_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.put_registration_tags_with_http_info(registration_id, tags, **kwargs)  # noqa: E501
            return data

    def put_registration_tags_with_http_info(self, registration_id, tags, **kwargs):  # noqa: E501
        """Add tags to a Registration   # noqa: E501

        Applies the provided tags to the registration.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration_tags_with_http_info(registration_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_registration_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `put_registration_tags`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `put_registration_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_registration_tags_batch(self, batch, **kwargs):  # noqa: E501
        """Add a group of tags to a group of Registrations   # noqa: E501

        Applies all of the provided tags on all of the provided registrations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration_tags_batch(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchTagsSchema batch: Array of ids, and array of tags for bulk tag operations (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_registration_tags_batch_with_http_info(batch, **kwargs)  # noqa: E501
        else:
            (data) = self.put_registration_tags_batch_with_http_info(batch, **kwargs)  # noqa: E501
            return data

    def put_registration_tags_batch_with_http_info(self, batch, **kwargs):  # noqa: E501
        """Add a group of tags to a group of Registrations   # noqa: E501

        Applies all of the provided tags on all of the provided registrations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetRegistrations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration_tags_batch_with_http_info(batch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchTagsSchema batch: Array of ids, and array of tags for bulk tag operations (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_registration_tags_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch' is set
        if ('batch' not in params or
                params['batch'] is None):
            raise ValueError("Missing the required parameter `batch` when calling `put_registration_tags_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch' in params:
            body_params = params['batch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_registration_configuration(self, registration_id, configuration_settings, **kwargs):  # noqa: E501
        """Update configuration settings for a Registration   # noqa: E501

        Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_configuration(registration_id, configuration_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param SettingsPostSchema configuration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_registration_configuration_with_http_info(registration_id, configuration_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.set_registration_configuration_with_http_info(registration_id, configuration_settings, **kwargs)  # noqa: E501
            return data

    def set_registration_configuration_with_http_info(self, registration_id, configuration_settings, **kwargs):  # noqa: E501
        """Update configuration settings for a Registration   # noqa: E501

        Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_configuration_with_http_info(registration_id, configuration_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param SettingsPostSchema configuration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'configuration_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_configuration`")  # noqa: E501
        # verify the required parameter 'configuration_settings' is set
        if ('configuration_settings' not in params or
                params['configuration_settings'] is None):
            raise ValueError("Missing the required parameter `configuration_settings` when calling `set_registration_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_settings' in params:
            body_params = params['configuration_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_registration_instance_configuration(self, registration_id, instance_id, configuration_settings, **kwargs):  # noqa: E501
        """Update configuration settings for a Registration Instance   # noqa: E501

        Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_instance_configuration(registration_id, instance_id, configuration_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param SettingsPostSchema configuration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, **kwargs)  # noqa: E501
            return data

    def set_registration_instance_configuration_with_http_info(self, registration_id, instance_id, configuration_settings, **kwargs):  # noqa: E501
        """Update configuration settings for a Registration Instance   # noqa: E501

        Updates configuration settings at the registration level.  This will explicitly set a value at the registration level and override any settings from a higher level.  Registrations are the bottom most level in the configuration hierarchy, so the values present at the registration level will be what are used when a course is launched.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_id: (required)
        :param int instance_id: (required)
        :param SettingsPostSchema configuration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'configuration_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `set_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'configuration_settings' is set
        if ('configuration_settings' not in params or
                params['configuration_settings'] is None):
            raise ValueError("Missing the required parameter `configuration_settings` when calling `set_registration_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_settings' in params:
            body_params = params['configuration_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_registration_postback(self, post_back, **kwargs):  # noqa: E501
        """Send a test postback with the provided configuration   # noqa: E501

        Sends a postback with dummy data to the url specified.  The postback will use additional information from the configuration provided with the request (e.g. a provided username/password will be sent along with the postback to allow for logging in to a secure page.  The format of the data sent will differ depending on whether `httpbasic` or `form` is passed for `authType`.  - With httpbasic, an authorization header will be sent with the base64 encoded credentials.  The body will be JSON formatted data. - With form, the username and password will be sent in the body of the request along with the data.  The whole body will be url encoded.  >**Note:** >The data that will be sent to the provided url is the same format as the output of the GetRegistrationProgress endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_registration_postback(post_back, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBackSchema post_back: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_registration_postback_with_http_info(post_back, **kwargs)  # noqa: E501
        else:
            (data) = self.test_registration_postback_with_http_info(post_back, **kwargs)  # noqa: E501
            return data

    def test_registration_postback_with_http_info(self, post_back, **kwargs):  # noqa: E501
        """Send a test postback with the provided configuration   # noqa: E501

        Sends a postback with dummy data to the url specified.  The postback will use additional information from the configuration provided with the request (e.g. a provided username/password will be sent along with the postback to allow for logging in to a secure page.  The format of the data sent will differ depending on whether `httpbasic` or `form` is passed for `authType`.  - With httpbasic, an authorization header will be sent with the base64 encoded credentials.  The body will be JSON formatted data. - With form, the username and password will be sent in the body of the request along with the data.  The whole body will be url encoded.  >**Note:** >The data that will be sent to the provided url is the same format as the output of the GetRegistrationProgress endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_registration_postback_with_http_info(post_back, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostBackSchema post_back: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_back']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_registration_postback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_back' is set
        if ('post_back' not in params or
                params['post_back'] is None):
            raise ValueError("Missing the required parameter `post_back` when calling `test_registration_postback`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_back' in params:
            body_params = params['post_back']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/postBackTest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
