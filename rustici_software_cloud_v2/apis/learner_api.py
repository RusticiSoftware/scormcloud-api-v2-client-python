# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LearnerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_all_learner_data(self, learner_id, user_email, **kwargs):
        """
        Deletes all of the information associated with a learner in an application, by learner id. 
        Deletes all of the information associated with a learner in an application, by learner id. This is meant for use with complying with GDPR requests from learners. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_all_learner_data(learner_id, user_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param str user_email: The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_all_learner_data_with_http_info(learner_id, user_email, **kwargs)
        else:
            (data) = self.delete_all_learner_data_with_http_info(learner_id, user_email, **kwargs)
            return data

    def delete_all_learner_data_with_http_info(self, learner_id, user_email, **kwargs):
        """
        Deletes all of the information associated with a learner in an application, by learner id. 
        Deletes all of the information associated with a learner in an application, by learner id. This is meant for use with complying with GDPR requests from learners. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_all_learner_data_with_http_info(learner_id, user_email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param str user_email: The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learner_id', 'user_email']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_learner_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learner_id' is set
        if ('learner_id' not in params) or (params['learner_id'] is None):
            raise ValueError("Missing the required parameter `learner_id` when calling `delete_all_learner_data`")
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params) or (params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `delete_all_learner_data`")


        collection_formats = {}

        resource_path = '/learner/{learnerId}/delete-information'.replace('{format}', 'json')
        path_params = {}
        if 'learner_id' in params:
            path_params['learnerId'] = params['learner_id']

        query_params = {}
        if 'user_email' in params:
            query_params['userEmail'] = params['user_email']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_learner_tags(self, learner_id, tags, **kwargs):
        """
        Delete the tags for this learner 
        Delete the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_learner_tags(learner_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_learner_tags_with_http_info(learner_id, tags, **kwargs)
        else:
            (data) = self.delete_learner_tags_with_http_info(learner_id, tags, **kwargs)
            return data

    def delete_learner_tags_with_http_info(self, learner_id, tags, **kwargs):
        """
        Delete the tags for this learner 
        Delete the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_learner_tags_with_http_info(learner_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learner_id', 'tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_learner_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learner_id' is set
        if ('learner_id' not in params) or (params['learner_id'] is None):
            raise ValueError("Missing the required parameter `learner_id` when calling `delete_learner_tags`")
        # verify the required parameter 'tags' is set
        if ('tags' not in params) or (params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `delete_learner_tags`")


        collection_formats = {}

        resource_path = '/learner/{learnerId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'learner_id' in params:
            path_params['learnerId'] = params['learner_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_learner_tags(self, learner_id, **kwargs):
        """
        Get the tags for this learner 
        Get the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_learner_tags(learner_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_learner_tags_with_http_info(learner_id, **kwargs)
        else:
            (data) = self.get_learner_tags_with_http_info(learner_id, **kwargs)
            return data

    def get_learner_tags_with_http_info(self, learner_id, **kwargs):
        """
        Get the tags for this learner 
        Get the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_learner_tags_with_http_info(learner_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learner_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learner_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learner_id' is set
        if ('learner_id' not in params) or (params['learner_id'] is None):
            raise ValueError("Missing the required parameter `learner_id` when calling `get_learner_tags`")


        collection_formats = {}

        resource_path = '/learner/{learnerId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'learner_id' in params:
            path_params['learnerId'] = params['learner_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TagListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_learner_tags(self, learner_id, tags, **kwargs):
        """
        Set the tags for this learner 
        Set the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_learner_tags(learner_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_learner_tags_with_http_info(learner_id, tags, **kwargs)
        else:
            (data) = self.put_learner_tags_with_http_info(learner_id, tags, **kwargs)
            return data

    def put_learner_tags_with_http_info(self, learner_id, tags, **kwargs):
        """
        Set the tags for this learner 
        Set the tags for this learner 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_learner_tags_with_http_info(learner_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner for which to remove all data from an application (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learner_id', 'tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_learner_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learner_id' is set
        if ('learner_id' not in params) or (params['learner_id'] is None):
            raise ValueError("Missing the required parameter `learner_id` when calling `put_learner_tags`")
        # verify the required parameter 'tags' is set
        if ('tags' not in params) or (params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `put_learner_tags`")


        collection_formats = {}

        resource_path = '/learner/{learnerId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'learner_id' in params:
            path_params['learnerId'] = params['learner_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_learner_tags_batch(self, batch, **kwargs):
        """
        Sets all of the provided tags on all of the provided learners
        Sets all of the provided tags on all of the provided learners 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_learner_tags_batch(batch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_learner_tags_batch_with_http_info(batch, **kwargs)
        else:
            (data) = self.put_learner_tags_batch_with_http_info(batch, **kwargs)
            return data

    def put_learner_tags_batch_with_http_info(self, batch, **kwargs):
        """
        Sets all of the provided tags on all of the provided learners
        Sets all of the provided tags on all of the provided learners 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_learner_tags_batch_with_http_info(batch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_learner_tags_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch' is set
        if ('batch' not in params) or (params['batch'] is None):
            raise ValueError("Missing the required parameter `batch` when calling `put_learner_tags_batch`")


        collection_formats = {}

        resource_path = '/learner/tags'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch' in params:
            body_params = params['batch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_learner_info(self, learner_id, learner_info, **kwargs):
        """
        Update a learner's info on all of their registrations.
        A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations. This method will update the information on each of the registrations that the provided `learnerId` is attached to.  You may update any of the values available in the LearnerSchema which is posted.  Any values you do not wish to alter, omit from the post.  Depending on the field, providing something like an empty string may have unintended consequences.  Lastly, it's important to note that this method is asynchronous.  A success status will be returned, and that signifies that a background process has been spun up to alter the learner's info.  As such, you may find a short period of delay in seeing the changes shown on all registrations. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_learner_info(learner_id, learner_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner to be updated (required)
        :param LearnerSchema learner_info: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_learner_info_with_http_info(learner_id, learner_info, **kwargs)
        else:
            (data) = self.update_learner_info_with_http_info(learner_id, learner_info, **kwargs)
            return data

    def update_learner_info_with_http_info(self, learner_id, learner_info, **kwargs):
        """
        Update a learner's info on all of their registrations.
        A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations. This method will update the information on each of the registrations that the provided `learnerId` is attached to.  You may update any of the values available in the LearnerSchema which is posted.  Any values you do not wish to alter, omit from the post.  Depending on the field, providing something like an empty string may have unintended consequences.  Lastly, it's important to note that this method is asynchronous.  A success status will be returned, and that signifies that a background process has been spun up to alter the learner's info.  As such, you may find a short period of delay in seeing the changes shown on all registrations. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_learner_info_with_http_info(learner_id, learner_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learner_id: The id of the learner to be updated (required)
        :param LearnerSchema learner_info: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learner_id', 'learner_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learner_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'learner_id' is set
        if ('learner_id' not in params) or (params['learner_id'] is None):
            raise ValueError("Missing the required parameter `learner_id` when calling `update_learner_info`")
        # verify the required parameter 'learner_info' is set
        if ('learner_info' not in params) or (params['learner_info'] is None):
            raise ValueError("Missing the required parameter `learner_info` when calling `update_learner_info`")


        collection_formats = {}

        resource_path = '/learner/{learnerId}/updateInfo'.replace('{format}', 'json')
        path_params = {}
        if 'learner_id' in params:
            path_params['learnerId'] = params['learner_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'learner_info' in params:
            body_params = params['learner_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
