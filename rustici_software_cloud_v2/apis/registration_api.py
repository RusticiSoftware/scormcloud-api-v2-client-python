# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0 beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RegistrationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_new_registration_instance(self, registration_id, **kwargs):
        """
        Create a new instance for this registration specified by the registration ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_registration_instance(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_new_registration_instance_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.create_new_registration_instance_with_http_info(registration_id, **kwargs)
            return data

    def create_new_registration_instance_with_http_info(self, registration_id, **kwargs):
        """
        Create a new instance for this registration specified by the registration ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_registration_instance_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_registration_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `create_new_registration_instance`")

        resource_path = '/registrations/{registrationId}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_registration(self, registration, **kwargs):
        """
        Create a registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_registration(registration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateRegistrationSchema registration:  (required)
        :param int course_version: The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_registration_with_http_info(registration, **kwargs)
        else:
            (data) = self.create_registration_with_http_info(registration, **kwargs)
            return data

    def create_registration_with_http_info(self, registration, **kwargs):
        """
        Create a registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_registration_with_http_info(registration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateRegistrationSchema registration:  (required)
        :param int course_version: The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration', 'course_version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration' is set
        if ('registration' not in params) or (params['registration'] is None):
            raise ValueError("Missing the required parameter `registration` when calling `create_registration`")

        resource_path = '/registrations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'course_version' in params:
            query_params['courseVersion'] = params['course_version']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registration' in params:
            body_params = params['registration']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_registration(self, registration_id, **kwargs):
        """
        Delete `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registration_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.delete_registration_with_http_info(registration_id, **kwargs)
            return data

    def delete_registration_with_http_info(self, registration_id, **kwargs):
        """
        Delete `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration`")

        resource_path = '/registrations/{registrationId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_registration_configuration_setting(self, registration_id, setting_id, **kwargs):
        """
        Clears the `settingId` value for this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_configuration_setting(registration_id, setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param str setting_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, **kwargs)
        else:
            (data) = self.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, **kwargs)
            return data

    def delete_registration_configuration_setting_with_http_info(self, registration_id, setting_id, **kwargs):
        """
        Clears the `settingId` value for this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_configuration_setting_with_http_info(registration_id, setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param str setting_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'setting_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_configuration_setting`")
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params) or (params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_configuration_setting`")

        resource_path = '/registrations/{registrationId}/configuration/{settingId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_registration_instance_configuration_setting(self, registration_id, instance_id, setting_id, **kwargs):
        """
        Clears the `settingId` value for this registration instance
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_instance_configuration_setting(registration_id, instance_id, setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param str setting_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, **kwargs)
        else:
            (data) = self.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, **kwargs)
            return data

    def delete_registration_instance_configuration_setting_with_http_info(self, registration_id, instance_id, setting_id, **kwargs):
        """
        Clears the `settingId` value for this registration instance
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param str setting_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'setting_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_instance_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_instance_configuration_setting`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_registration_instance_configuration_setting`")
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params) or (params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_instance_configuration_setting`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `delete_registration_instance_configuration_setting`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_registration_progress(self, registration_id, **kwargs):
        """
        Delete registration progress (clear registration)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_progress(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registration_progress_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.delete_registration_progress_with_http_info(registration_id, **kwargs)
            return data

    def delete_registration_progress_with_http_info(self, registration_id, **kwargs):
        """
        Delete registration progress (clear registration)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registration_progress_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_progress`")

        resource_path = '/registrations/{registrationId}/progress'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_registrations_global_data(self, registration_id, **kwargs):
        """
        Delete global data associated with `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registrations_global_data(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_registrations_global_data_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.delete_registrations_global_data_with_http_info(registration_id, **kwargs)
            return data

    def delete_registrations_global_data_with_http_info(self, registration_id, **kwargs):
        """
        Delete global data associated with `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_registrations_global_data_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registrations_global_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registrations_global_data`")

        resource_path = '/registrations/{registrationId}/globalData'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_configuration(self, registration_id, **kwargs):
        """
        Returns all configuration settings for this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_configuration(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_metadata: 
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_configuration_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.get_registration_configuration_with_http_info(registration_id, **kwargs)
            return data

    def get_registration_configuration_with_http_info(self, registration_id, **kwargs):
        """
        Returns all configuration settings for this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_configuration_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_metadata: 
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_configuration`")

        resource_path = '/registrations/{registrationId}/configuration'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}
        if 'include_metadata' in params:
            query_params['includeMetadata'] = params['include_metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_instance_configuration(self, registration_id, instance_id, **kwargs):
        """
        Returns all configuration settings for this registration instance
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_configuration(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_metadata: 
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_instance_configuration_with_http_info(registration_id, instance_id, **kwargs)
        else:
            (data) = self.get_registration_instance_configuration_with_http_info(registration_id, instance_id, **kwargs)
            return data

    def get_registration_instance_configuration_with_http_info(self, registration_id, instance_id, **kwargs):
        """
        Returns all configuration settings for this registration instance
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_configuration_with_http_info(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_metadata: 
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_configuration`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_configuration`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `get_registration_instance_configuration`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}
        if 'include_metadata' in params:
            query_params['includeMetadata'] = params['include_metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SettingListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_instance_launch_history(self, registration_id, instance_id, **kwargs):
        """
        Returns history of this registration's launches
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_launch_history(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, **kwargs)
        else:
            (data) = self.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, **kwargs)
            return data

    def get_registration_instance_launch_history_with_http_info(self, registration_id, instance_id, **kwargs):
        """
        Returns history of this registration's launches
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_launch_history_with_http_info(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_history_log']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_launch_history`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_launch_history`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `get_registration_instance_launch_history`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}/launchHistory'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}
        if 'include_history_log' in params:
            query_params['includeHistoryLog'] = params['include_history_log']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LaunchHistoryListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_instance_progress(self, registration_id, instance_id, **kwargs):
        """
        Get registration progress for instance `instanceId` of `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_progress(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_instance_progress_with_http_info(registration_id, instance_id, **kwargs)
        else:
            (data) = self.get_registration_instance_progress_with_http_info(registration_id, instance_id, **kwargs)
            return data

    def get_registration_instance_progress_with_http_info(self, registration_id, instance_id, **kwargs):
        """
        Get registration progress for instance `instanceId` of `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_progress_with_http_info(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_progress`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_progress`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `get_registration_instance_progress`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}
        if 'include_child_results' in params:
            query_params['includeChildResults'] = params['include_child_results']
        if 'include_interactions_and_objectives' in params:
            query_params['includeInteractionsAndObjectives'] = params['include_interactions_and_objectives']
        if 'include_runtime' in params:
            query_params['includeRuntime'] = params['include_runtime']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RegistrationSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_instance_statements(self, registration_id, instance_id, **kwargs):
        """
        Get xAPI statements for instance `instanceId` of `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_statements(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_instance_statements_with_http_info(registration_id, instance_id, **kwargs)
        else:
            (data) = self.get_registration_instance_statements_with_http_info(registration_id, instance_id, **kwargs)
            return data

    def get_registration_instance_statements_with_http_info(self, registration_id, instance_id, **kwargs):
        """
        Get xAPI statements for instance `instanceId` of `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instance_statements_with_http_info(registration_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'since', 'until', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_statements`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_statements`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `get_registration_instance_statements`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='XapiStatementResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_instances(self, registration_id, **kwargs):
        """
        Get all the instances of this the registration specified by the registration ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instances(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_instances_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.get_registration_instances_with_http_info(registration_id, **kwargs)
            return data

    def get_registration_instances_with_http_info(self, registration_id, **kwargs):
        """
        Get all the instances of this the registration specified by the registration ID
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_instances_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'until', 'since', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instances`")

        resource_path = '/registrations/{registrationId}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}
        if 'until' in params:
            query_params['until'] = params['until']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'more' in params:
            query_params['more'] = params['more']
        if 'include_child_results' in params:
            query_params['includeChildResults'] = params['include_child_results']
        if 'include_interactions_and_objectives' in params:
            query_params['includeInteractionsAndObjectives'] = params['include_interactions_and_objectives']
        if 'include_runtime' in params:
            query_params['includeRuntime'] = params['include_runtime']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RegistrationListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_launch_history(self, registration_id, **kwargs):
        """
        Returns history of this registration's launches
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_launch_history(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_launch_history_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.get_registration_launch_history_with_http_info(registration_id, **kwargs)
            return data

    def get_registration_launch_history_with_http_info(self, registration_id, **kwargs):
        """
        Returns history of this registration's launches
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_launch_history_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_history_log']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_launch_history`")

        resource_path = '/registrations/{registrationId}/launchHistory'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}
        if 'include_history_log' in params:
            query_params['includeHistoryLog'] = params['include_history_log']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LaunchHistoryListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_launch_link(self, registration_id, launch_link_request, **kwargs):
        """
        Returns the link to use to launch this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_launch_link(registration_id, launch_link_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param LaunchLinkRequestSchema launch_link_request:  (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_launch_link_with_http_info(registration_id, launch_link_request, **kwargs)
        else:
            (data) = self.get_registration_launch_link_with_http_info(registration_id, launch_link_request, **kwargs)
            return data

    def get_registration_launch_link_with_http_info(self, registration_id, launch_link_request, **kwargs):
        """
        Returns the link to use to launch this registration
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_launch_link_with_http_info(registration_id, launch_link_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param LaunchLinkRequestSchema launch_link_request:  (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'launch_link_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_launch_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_launch_link`")
        # verify the required parameter 'launch_link_request' is set
        if ('launch_link_request' not in params) or (params['launch_link_request'] is None):
            raise ValueError("Missing the required parameter `launch_link_request` when calling `get_registration_launch_link`")

        resource_path = '/registrations/{registrationId}/launchLink'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'launch_link_request' in params:
            body_params = params['launch_link_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LaunchLinkSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_progress(self, registration_id, **kwargs):
        """
        Get registration progress for `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_progress(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_progress_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.get_registration_progress_with_http_info(registration_id, **kwargs)
            return data

    def get_registration_progress_with_http_info(self, registration_id, **kwargs):
        """
        Get registration progress for `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_progress_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_progress`")

        resource_path = '/registrations/{registrationId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}
        if 'include_child_results' in params:
            query_params['includeChildResults'] = params['include_child_results']
        if 'include_interactions_and_objectives' in params:
            query_params['includeInteractionsAndObjectives'] = params['include_interactions_and_objectives']
        if 'include_runtime' in params:
            query_params['includeRuntime'] = params['include_runtime']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RegistrationSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registration_statements(self, registration_id, **kwargs):
        """
        Get xAPI statements for `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_statements(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registration_statements_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.get_registration_statements_with_http_info(registration_id, **kwargs)
            return data

    def get_registration_statements_with_http_info(self, registration_id, **kwargs):
        """
        Get xAPI statements for `registrationId`
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registration_statements_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'since', 'until', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_statements`")

        resource_path = '/registrations/{registrationId}/xAPIStatements'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='XapiStatementResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_registrations(self, **kwargs):
        """
        Gets a list of registrations including a summary of the status of each registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registrations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Only registrations for the specified course id will be included.
        :param str learner_id: Only registrations for the specified learner id will be included.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registrations_with_http_info(**kwargs)
        else:
            (data) = self.get_registrations_with_http_info(**kwargs)
            return data

    def get_registrations_with_http_info(self, **kwargs):
        """
        Gets a list of registrations including a summary of the status of each registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registrations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Only registrations for the specified course id will be included.
        :param str learner_id: Only registrations for the specified learner id will be included.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'learner_id', 'since', 'until', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registrations" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/registrations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'course_id' in params:
            query_params['courseId'] = params['course_id']
        if 'learner_id' in params:
            query_params['learnerId'] = params['learner_id']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'more' in params:
            query_params['more'] = params['more']
        if 'include_child_results' in params:
            query_params['includeChildResults'] = params['include_child_results']
        if 'include_interactions_and_objectives' in params:
            query_params['includeInteractionsAndObjectives'] = params['include_interactions_and_objectives']
        if 'include_runtime' in params:
            query_params['includeRuntime'] = params['include_runtime']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RegistrationListSchema',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def registration_exists(self, registration_id, **kwargs):
        """
        Does this registration exist?
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registration_exists(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registration_exists_with_http_info(registration_id, **kwargs)
        else:
            (data) = self.registration_exists_with_http_info(registration_id, **kwargs)
            return data

    def registration_exists_with_http_info(self, registration_id, **kwargs):
        """
        Does this registration exist?
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registration_exists_with_http_info(registration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `registration_exists`")

        resource_path = '/registrations/{registrationId}'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def set_registration_configuration(self, registration_id, configuration_settings, **kwargs):
        """
        Set configuration settings for this registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_registration_configuration(registration_id, configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param SettingsPostSchema configuration_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_registration_configuration_with_http_info(registration_id, configuration_settings, **kwargs)
        else:
            (data) = self.set_registration_configuration_with_http_info(registration_id, configuration_settings, **kwargs)
            return data

    def set_registration_configuration_with_http_info(self, registration_id, configuration_settings, **kwargs):
        """
        Set configuration settings for this registration.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_registration_configuration_with_http_info(registration_id, configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param SettingsPostSchema configuration_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'configuration_settings']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_configuration`")
        # verify the required parameter 'configuration_settings' is set
        if ('configuration_settings' not in params) or (params['configuration_settings'] is None):
            raise ValueError("Missing the required parameter `configuration_settings` when calling `set_registration_configuration`")

        resource_path = '/registrations/{registrationId}/configuration'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_settings' in params:
            body_params = params['configuration_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def set_registration_instance_configuration(self, registration_id, instance_id, configuration_settings, **kwargs):
        """
        Set configuration settings for this registration instance.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_registration_instance_configuration(registration_id, instance_id, configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param SettingsPostSchema configuration_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, **kwargs)
        else:
            (data) = self.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, **kwargs)
            return data

    def set_registration_instance_configuration_with_http_info(self, registration_id, instance_id, configuration_settings, **kwargs):
        """
        Set configuration settings for this registration instance.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str registration_id: id for this registration (required)
        :param int instance_id: The instance of this registration (required)
        :param SettingsPostSchema configuration_settings:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_id', 'instance_id', 'configuration_settings']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params) or (params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_instance_configuration`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `set_registration_instance_configuration`")
        # verify the required parameter 'configuration_settings' is set
        if ('configuration_settings' not in params) or (params['configuration_settings'] is None):
            raise ValueError("Missing the required parameter `configuration_settings` when calling `set_registration_instance_configuration`")

        if 'instance_id' in params and params['instance_id'] < 0.0:
            raise ValueError("Invalid value for parameter `instance_id` when calling `set_registration_instance_configuration`, must be a value greater than or equal to `0.0`")
        resource_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.replace('{format}', 'json')
        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_settings' in params:
            body_params = params['configuration_settings']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
