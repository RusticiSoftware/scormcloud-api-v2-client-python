# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class XapiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_statement_pipe(self, xapi_statement_pipe, **kwargs):
        """
        Create an xAPI statement pipe.
        Create an xAPI statement pipe.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_statement_pipe(xapi_statement_pipe, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param XapiStatementPipePostSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_statement_pipe_with_http_info(xapi_statement_pipe, **kwargs)
        else:
            (data) = self.create_statement_pipe_with_http_info(xapi_statement_pipe, **kwargs)
            return data

    def create_statement_pipe_with_http_info(self, xapi_statement_pipe, **kwargs):
        """
        Create an xAPI statement pipe.
        Create an xAPI statement pipe.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_statement_pipe_with_http_info(xapi_statement_pipe, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param XapiStatementPipePostSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_statement_pipe']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_statement_pipe' is set
        if ('xapi_statement_pipe' not in params) or (params['xapi_statement_pipe'] is None):
            raise ValueError("Missing the required parameter `xapi_statement_pipe` when calling `create_statement_pipe`")


        collection_formats = {}

        resource_path = '/xapi/statementPipes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_statement_pipe' in params:
            body_params = params['xapi_statement_pipe']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StringResultSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_xapi_credential(self, xapi_credential, **kwargs):
        """
        Create a xAPI credential.
        Create a xAPI credential.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_xapi_credential(xapi_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_xapi_credential_with_http_info(xapi_credential, **kwargs)
        else:
            (data) = self.create_xapi_credential_with_http_info(xapi_credential, **kwargs)
            return data

    def create_xapi_credential_with_http_info(self, xapi_credential, **kwargs):
        """
        Create a xAPI credential.
        Create a xAPI credential.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_xapi_credential_with_http_info(xapi_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential' is set
        if ('xapi_credential' not in params) or (params['xapi_credential'] is None):
            raise ValueError("Missing the required parameter `xapi_credential` when calling `create_xapi_credential`")


        collection_formats = {}

        resource_path = '/xapi/credentials'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_credential' in params:
            body_params = params['xapi_credential']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StringResultSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_statement_pipe(self, statement_pipe_id, **kwargs):
        """
        Deletes this xAPI pipe.
        Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_statement_pipe(statement_pipe_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_statement_pipe_with_http_info(statement_pipe_id, **kwargs)
        else:
            (data) = self.delete_statement_pipe_with_http_info(statement_pipe_id, **kwargs)
            return data

    def delete_statement_pipe_with_http_info(self, statement_pipe_id, **kwargs):
        """
        Deletes this xAPI pipe.
        Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_statement_pipe_with_http_info(statement_pipe_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params) or (params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `delete_statement_pipe`")


        collection_formats = {}

        resource_path = '/xapi/statementPipes/{statementPipeId}'.replace('{format}', 'json')
        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_xapi_credential(self, xapi_credential_id, **kwargs):
        """
        Deletes the xAPI credentials specified by the xAPI credentials id
        Deletes the xAPI credentials specified by the xAPI credentials id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_xapi_credential(xapi_credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_xapi_credential_with_http_info(xapi_credential_id, **kwargs)
        else:
            (data) = self.delete_xapi_credential_with_http_info(xapi_credential_id, **kwargs)
            return data

    def delete_xapi_credential_with_http_info(self, xapi_credential_id, **kwargs):
        """
        Deletes the xAPI credentials specified by the xAPI credentials id
        Deletes the xAPI credentials specified by the xAPI credentials id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_xapi_credential_with_http_info(xapi_credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params) or (params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `delete_xapi_credential`")


        collection_formats = {}

        resource_path = '/xapi/credentials/{xapiCredentialId}'.replace('{format}', 'json')
        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_statement_pipe(self, statement_pipe_id, **kwargs):
        """
        Retrieves xAPI pipe for `xapiPipeId`
        Retrieves xAPI pipe for `xapiPipeId`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statement_pipe(statement_pipe_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: XapiStatementPipeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_statement_pipe_with_http_info(statement_pipe_id, **kwargs)
        else:
            (data) = self.get_statement_pipe_with_http_info(statement_pipe_id, **kwargs)
            return data

    def get_statement_pipe_with_http_info(self, statement_pipe_id, **kwargs):
        """
        Retrieves xAPI pipe for `xapiPipeId`
        Retrieves xAPI pipe for `xapiPipeId`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statement_pipe_with_http_info(statement_pipe_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :return: XapiStatementPipeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params) or (params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `get_statement_pipe`")


        collection_formats = {}

        resource_path = '/xapi/statementPipes/{statementPipeId}'.replace('{format}', 'json')
        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='XapiStatementPipeSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_statement_pipes(self, **kwargs):
        """
        Get all of the xapiPipes for `appId`
        Get all of the xapiPipes for `appId`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statement_pipes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: XapiStatementPipeListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_statement_pipes_with_http_info(**kwargs)
        else:
            (data) = self.get_statement_pipes_with_http_info(**kwargs)
            return data

    def get_statement_pipes_with_http_info(self, **kwargs):
        """
        Get all of the xapiPipes for `appId`
        Get all of the xapiPipes for `appId`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statement_pipes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: XapiStatementPipeListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statement_pipes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/xapi/statementPipes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='XapiStatementPipeListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_xapi_credential(self, xapi_credential_id, **kwargs):
        """
        Retrieves the xAPI credentials specified by the xAPI credentials id.
        Retrieves the xAPI credentials specified by the xAPI credentials id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_xapi_credential(xapi_credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: XapiCredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_xapi_credential_with_http_info(xapi_credential_id, **kwargs)
        else:
            (data) = self.get_xapi_credential_with_http_info(xapi_credential_id, **kwargs)
            return data

    def get_xapi_credential_with_http_info(self, xapi_credential_id, **kwargs):
        """
        Retrieves the xAPI credentials specified by the xAPI credentials id.
        Retrieves the xAPI credentials specified by the xAPI credentials id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_xapi_credential_with_http_info(xapi_credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :return: XapiCredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params) or (params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `get_xapi_credential`")


        collection_formats = {}

        resource_path = '/xapi/credentials/{xapiCredentialId}'.replace('{format}', 'json')
        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='XapiCredentialSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_xapi_credentials(self, **kwargs):
        """
        Get the list of xapiCredentials
        Get the list of xapiCredentials
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_xapi_credentials(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime since: Only <<resourcePathName>> updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of <<resourcePathName>> lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiCredentialsListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_xapi_credentials_with_http_info(**kwargs)
        else:
            (data) = self.get_xapi_credentials_with_http_info(**kwargs)
            return data

    def get_xapi_credentials_with_http_info(self, **kwargs):
        """
        Get the list of xapiCredentials
        Get the list of xapiCredentials
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_xapi_credentials_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime since: Only <<resourcePathName>> updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of <<resourcePathName>> lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiCredentialsListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['since', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xapi_credentials" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/xapi/credentials'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'since' in params:
            query_params['since'] = params['since']
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='XapiCredentialsListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_statement_pipe(self, statement_pipe_id, xapi_statement_pipe, **kwargs):
        """
        Edit an existing xAPI pipe or create a new one.
        Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_statement_pipe(statement_pipe_id, xapi_statement_pipe, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :param XapiStatementPipePutSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, **kwargs)
        else:
            (data) = self.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, **kwargs)
            return data

    def set_statement_pipe_with_http_info(self, statement_pipe_id, xapi_statement_pipe, **kwargs):
        """
        Edit an existing xAPI pipe or create a new one.
        Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_statement_pipe_with_http_info(statement_pipe_id, xapi_statement_pipe, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str statement_pipe_id: id for this xAPI statement pipe (required)
        :param XapiStatementPipePutSchema xapi_statement_pipe: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statement_pipe_id', 'xapi_statement_pipe']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_statement_pipe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'statement_pipe_id' is set
        if ('statement_pipe_id' not in params) or (params['statement_pipe_id'] is None):
            raise ValueError("Missing the required parameter `statement_pipe_id` when calling `set_statement_pipe`")
        # verify the required parameter 'xapi_statement_pipe' is set
        if ('xapi_statement_pipe' not in params) or (params['xapi_statement_pipe'] is None):
            raise ValueError("Missing the required parameter `xapi_statement_pipe` when calling `set_statement_pipe`")


        collection_formats = {}

        resource_path = '/xapi/statementPipes/{statementPipeId}'.replace('{format}', 'json')
        path_params = {}
        if 'statement_pipe_id' in params:
            path_params['statementPipeId'] = params['statement_pipe_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_statement_pipe' in params:
            body_params = params['xapi_statement_pipe']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StringResultSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_xapi_credential(self, xapi_credential_id, xapi_credential, **kwargs):
        """
        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_xapi_credential(xapi_credential_id, xapi_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, **kwargs)
        else:
            (data) = self.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, **kwargs)
            return data

    def set_xapi_credential_with_http_info(self, xapi_credential_id, xapi_credential, **kwargs):
        """
        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_xapi_credential_with_http_info(xapi_credential_id, xapi_credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str xapi_credential_id: id for this xAPI credential (required)
        :param XapiCredentialPostSchema xapi_credential: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xapi_credential_id', 'xapi_credential']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_xapi_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xapi_credential_id' is set
        if ('xapi_credential_id' not in params) or (params['xapi_credential_id'] is None):
            raise ValueError("Missing the required parameter `xapi_credential_id` when calling `set_xapi_credential`")
        # verify the required parameter 'xapi_credential' is set
        if ('xapi_credential' not in params) or (params['xapi_credential'] is None):
            raise ValueError("Missing the required parameter `xapi_credential` when calling `set_xapi_credential`")


        collection_formats = {}

        resource_path = '/xapi/credentials/{xapiCredentialId}'.replace('{format}', 'json')
        path_params = {}
        if 'xapi_credential_id' in params:
            path_params['xapiCredentialId'] = params['xapi_credential_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xapi_credential' in params:
            body_params = params['xapi_credential']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
