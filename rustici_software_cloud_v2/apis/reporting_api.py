# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_account_info(self, **kwargs):
        """
        Get all of the account information specified by the given app ID
        Get all of the account information specified by the given app ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ReportageAccountInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_info_with_http_info(**kwargs)
        else:
            (data) = self.get_account_info_with_http_info(**kwargs)
            return data

    def get_account_info_with_http_info(self, **kwargs):
        """
        Get all of the account information specified by the given app ID
        Get all of the account information specified by the given app ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_info_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ReportageAccountInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/reporting/accountInfo'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportageAccountInfoSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reportage_auth_token(self, nav_permission, **kwargs):
        """
        Get a session authentication token to use when launching Reportage
        Get a session authentication token to use when launching Reportage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reportage_auth_token(nav_permission, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nav_permission: The navigation permissions for this Reportage session (required)
        :param bool admin: Grant admin privileges to this Reportage session
        :return: ReportageAuthTokenSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reportage_auth_token_with_http_info(nav_permission, **kwargs)
        else:
            (data) = self.get_reportage_auth_token_with_http_info(nav_permission, **kwargs)
            return data

    def get_reportage_auth_token_with_http_info(self, nav_permission, **kwargs):
        """
        Get a session authentication token to use when launching Reportage
        Get a session authentication token to use when launching Reportage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reportage_auth_token_with_http_info(nav_permission, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nav_permission: The navigation permissions for this Reportage session (required)
        :param bool admin: Grant admin privileges to this Reportage session
        :return: ReportageAuthTokenSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nav_permission', 'admin']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reportage_auth_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nav_permission' is set
        if ('nav_permission' not in params) or (params['nav_permission'] is None):
            raise ValueError("Missing the required parameter `nav_permission` when calling `get_reportage_auth_token`")


        collection_formats = {}

        resource_path = '/reporting/reportageAuth'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nav_permission' in params:
            query_params['navPermission'] = params['nav_permission']
        if 'admin' in params:
            query_params['admin'] = params['admin']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportageAuthTokenSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reportage_link(self, auth, report_url, **kwargs):
        """
        Get the link to a page in Reportage with the given authentication and permissions
        Get the link to a page in Reportage with the given authentication and permissions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reportage_link(auth, report_url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth: The reportage authentication token retrieved from a previous call to `GET reportageAuth` (required)
        :param str report_url: The Reportage URL to try and access (required)
        :return: ReportageLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reportage_link_with_http_info(auth, report_url, **kwargs)
        else:
            (data) = self.get_reportage_link_with_http_info(auth, report_url, **kwargs)
            return data

    def get_reportage_link_with_http_info(self, auth, report_url, **kwargs):
        """
        Get the link to a page in Reportage with the given authentication and permissions
        Get the link to a page in Reportage with the given authentication and permissions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reportage_link_with_http_info(auth, report_url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auth: The reportage authentication token retrieved from a previous call to `GET reportageAuth` (required)
        :param str report_url: The Reportage URL to try and access (required)
        :return: ReportageLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auth', 'report_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reportage_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auth' is set
        if ('auth' not in params) or (params['auth'] is None):
            raise ValueError("Missing the required parameter `auth` when calling `get_reportage_link`")
        # verify the required parameter 'report_url' is set
        if ('report_url' not in params) or (params['report_url'] is None):
            raise ValueError("Missing the required parameter `report_url` when calling `get_reportage_link`")


        collection_formats = {}

        resource_path = '/reporting/reportageLink'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'auth' in params:
            query_params['auth'] = params['auth']
        if 'report_url' in params:
            query_params['reportUrl'] = params['report_url']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportageLinkSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
