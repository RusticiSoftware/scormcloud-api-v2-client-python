# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class InvitationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_private_invitation(self, private_invitation_request, **kwargs):
        """
        Create a private invitation to a course.
        Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to `/invitations/private/{invitationId}/status` must be made.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_private_invitation(private_invitation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreatePrivateInvitationSchema private_invitation_request:  (required)
        :return: InvitationSummarySchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_private_invitation_with_http_info(private_invitation_request, **kwargs)
        else:
            (data) = self.create_private_invitation_with_http_info(private_invitation_request, **kwargs)
            return data

    def create_private_invitation_with_http_info(self, private_invitation_request, **kwargs):
        """
        Create a private invitation to a course.
        Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to `/invitations/private/{invitationId}/status` must be made.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_private_invitation_with_http_info(private_invitation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreatePrivateInvitationSchema private_invitation_request:  (required)
        :return: InvitationSummarySchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['private_invitation_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'private_invitation_request' is set
        if ('private_invitation_request' not in params) or (params['private_invitation_request'] is None):
            raise ValueError("Missing the required parameter `private_invitation_request` when calling `create_private_invitation`")


        collection_formats = {}

        resource_path = '/invitations/private'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'private_invitation_request' in params:
            body_params = params['private_invitation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InvitationSummarySchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_public_invitation(self, public_invitation_request, **kwargs):
        """
        Create a publicly accessible invitation to a course.
        Create a publicly accessible invitation to a course.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_public_invitation(public_invitation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreatePublicInvitationSchema public_invitation_request: A description of the public invitation to be created. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_public_invitation_with_http_info(public_invitation_request, **kwargs)
        else:
            (data) = self.create_public_invitation_with_http_info(public_invitation_request, **kwargs)
            return data

    def create_public_invitation_with_http_info(self, public_invitation_request, **kwargs):
        """
        Create a publicly accessible invitation to a course.
        Create a publicly accessible invitation to a course.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_public_invitation_with_http_info(public_invitation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreatePublicInvitationSchema public_invitation_request: A description of the public invitation to be created. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_invitation_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_invitation_request' is set
        if ('public_invitation_request' not in params) or (params['public_invitation_request'] is None):
            raise ValueError("Missing the required parameter `public_invitation_request` when calling `create_public_invitation`")


        collection_formats = {}

        resource_path = '/invitations/public'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'public_invitation_request' in params:
            body_params = params['public_invitation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicInvitationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_invitation_tags(self, invitation_id, tags, **kwargs):
        """
        Delete the tags for this invitation 
        Delete the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invitation_tags(invitation_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_invitation_tags_with_http_info(invitation_id, tags, **kwargs)
        else:
            (data) = self.delete_invitation_tags_with_http_info(invitation_id, tags, **kwargs)
            return data

    def delete_invitation_tags_with_http_info(self, invitation_id, tags, **kwargs):
        """
        Delete the tags for this invitation 
        Delete the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invitation_tags_with_http_info(invitation_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `delete_invitation_tags`")
        # verify the required parameter 'tags' is set
        if ('tags' not in params) or (params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `delete_invitation_tags`")


        collection_formats = {}

        resource_path = '/invitations/{invitationId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_invitations(self, **kwargs):
        """
        Get a list of invitation summaries.
        Get a summary of all the invitations for an appId, both public and private.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invitations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: InvitationSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_invitations_with_http_info(**kwargs)
        else:
            (data) = self.get_all_invitations_with_http_info(**kwargs)
            return data

    def get_all_invitations_with_http_info(self, **kwargs):
        """
        Get a list of invitation summaries.
        Get a summary of all the invitations for an appId, both public and private.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invitations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: InvitationSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invitations" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/invitations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'course_id' in params:
            query_params['courseId'] = params['course_id']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'datetime_filter' in params:
            query_params['datetimeFilter'] = params['datetime_filter']
        if 'tags' in params:
            query_params['tags'] = params['tags']
            collection_formats['tags'] = 'csv'
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InvitationSummaryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_invitation_tags(self, invitation_id, **kwargs):
        """
        Get the tags for this invitation 
        Get the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invitation_tags(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_invitation_tags_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_invitation_tags_with_http_info(invitation_id, **kwargs)
            return data

    def get_invitation_tags_with_http_info(self, invitation_id, **kwargs):
        """
        Get the tags for this invitation 
        Get the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invitation_tags_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :return: TagListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_invitation_tags`")


        collection_formats = {}

        resource_path = '/invitations/{invitationId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TagListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_private_invitation(self, invitation_id, **kwargs):
        """
        Get a information about a private invitation.
        Get a information about a private invitation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitation(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_private_invitation_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_private_invitation_with_http_info(invitation_id, **kwargs)
            return data

    def get_private_invitation_with_http_info(self, invitation_id, **kwargs):
        """
        Get a information about a private invitation.
        Get a information about a private invitation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitation_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'include_registration_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_invitation`")


        collection_formats = {}

        resource_path = '/invitations/private/{invitationId}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}
        if 'include_registration_count' in params:
            query_params['includeRegistrationCount'] = params['include_registration_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateInvitationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_private_invitation_job_status(self, invitation_id, **kwargs):
        """
        Get the status of an invitation job.
        Get the status of a job to send out private invitations.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitation_job_status(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :return: InvitationJobStatusSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_private_invitation_job_status_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_private_invitation_job_status_with_http_info(invitation_id, **kwargs)
            return data

    def get_private_invitation_job_status_with_http_info(self, invitation_id, **kwargs):
        """
        Get the status of an invitation job.
        Get the status of a job to send out private invitations.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitation_job_status_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :return: InvitationJobStatusSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitation_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_invitation_job_status`")


        collection_formats = {}

        resource_path = '/invitations/private/{invitationId}/jobStatus'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InvitationJobStatusSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_private_invitations(self, **kwargs):
        """
        Get a list of all private invitations.
        Retrieves a list of all private invitations, optionally filtered by the given parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PrivateInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_private_invitations_with_http_info(**kwargs)
        else:
            (data) = self.get_private_invitations_with_http_info(**kwargs)
            return data

    def get_private_invitations_with_http_info(self, **kwargs):
        """
        Get a list of all private invitations.
        Retrieves a list of all private invitations, optionally filtered by the given parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_invitations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PrivateInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_invitations" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/invitations/private'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'course_id' in params:
            query_params['courseId'] = params['course_id']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'datetime_filter' in params:
            query_params['datetimeFilter'] = params['datetime_filter']
        if 'tags' in params:
            query_params['tags'] = params['tags']
            collection_formats['tags'] = 'csv'
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateInvitationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_private_user_invitations(self, invitation_id, **kwargs):
        """
        Get a list of user invitations.
        Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_user_invitations(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_private_user_invitations_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_private_user_invitations_with_http_info(invitation_id, **kwargs)
            return data

    def get_private_user_invitations_with_http_info(self, invitation_id, **kwargs):
        """
        Get a list of user invitations.
        Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_user_invitations_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'since', 'until', 'include_registration_report', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_user_invitations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_private_user_invitations`")


        collection_formats = {}

        resource_path = '/invitations/private/{invitationId}/userInvitations'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'include_registration_report' in params:
            query_params['includeRegistrationReport'] = params['include_registration_report']
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInvitationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_public_invitation(self, invitation_id, **kwargs):
        """
        Get a information about a public invitation.
        Get a information about a public invitation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_invitation(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_public_invitation_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_public_invitation_with_http_info(invitation_id, **kwargs)
            return data

    def get_public_invitation_with_http_info(self, invitation_id, **kwargs):
        """
        Get a information about a public invitation.
        Get a information about a public invitation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_invitation_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param bool include_registration_count: Include the registration count in the results
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'include_registration_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_public_invitation`")


        collection_formats = {}

        resource_path = '/invitations/public/{invitationId}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}
        if 'include_registration_count' in params:
            query_params['includeRegistrationCount'] = params['include_registration_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicInvitationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_public_invitations(self, **kwargs):
        """
        Get a list of all public invitations.
        Retrieves a list of all public invitations, optionally filtered by the given parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_invitations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PublicInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_public_invitations_with_http_info(**kwargs)
        else:
            (data) = self.get_public_invitations_with_http_info(**kwargs)
            return data

    def get_public_invitations_with_http_info(self, **kwargs):
        """
        Get a list of all public invitations.
        Retrieves a list of all public invitations, optionally filtered by the given parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_invitations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str course_id: Limit the results to invitations with courseIds that match the filter.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str datetime_filter: A string describing what the since/until parameters will be applied to. Options are: 'created' or 'updated'.  If not provided, it will default to `updated`.
        :param list[str] tags:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: PublicInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'since', 'until', 'datetime_filter', 'tags', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_invitations" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/invitations/public'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'course_id' in params:
            query_params['courseId'] = params['course_id']
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'datetime_filter' in params:
            query_params['datetimeFilter'] = params['datetime_filter']
        if 'tags' in params:
            query_params['tags'] = params['tags']
            collection_formats['tags'] = 'csv'
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicInvitationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_public_user_invitations(self, invitation_id, **kwargs):
        """
        Get a list of user invitations.
        Get a list of objects which contain the specific information about each user who visited the invitation link.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_user_invitations(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_public_user_invitations_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_public_user_invitations_with_http_info(invitation_id, **kwargs)
            return data

    def get_public_user_invitations_with_http_info(self, invitation_id, **kwargs):
        """
        Get a list of user invitations.
        Get a list of objects which contain the specific information about each user who visited the invitation link.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_public_user_invitations_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param bool include_registration_report:
        :param str more: Value for this parameter will be provided in the 'more' property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: UserInvitationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'since', 'until', 'include_registration_report', 'more']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_user_invitations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_public_user_invitations`")


        collection_formats = {}

        resource_path = '/invitations/public/{invitationId}/userInvitations'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}
        if 'since' in params:
            query_params['since'] = params['since']
        if 'until' in params:
            query_params['until'] = params['until']
        if 'include_registration_report' in params:
            query_params['includeRegistrationReport'] = params['include_registration_report']
        if 'more' in params:
            query_params['more'] = params['more']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInvitationList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_invitation_tags(self, invitation_id, tags, **kwargs):
        """
        Set the tags for this invitation 
        Set the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_invitation_tags(invitation_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_invitation_tags_with_http_info(invitation_id, tags, **kwargs)
        else:
            (data) = self.put_invitation_tags_with_http_info(invitation_id, tags, **kwargs)
            return data

    def put_invitation_tags_with_http_info(self, invitation_id, tags, **kwargs):
        """
        Set the tags for this invitation 
        Set the tags for this invitation 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_invitation_tags_with_http_info(invitation_id, tags, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param TagListSchema tags: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'tags']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_invitation_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `put_invitation_tags`")
        # verify the required parameter 'tags' is set
        if ('tags' not in params) or (params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `put_invitation_tags`")


        collection_formats = {}

        resource_path = '/invitations/{invitationId}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tags' in params:
            body_params = params['tags']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_invitation_tags_batch(self, batch, **kwargs):
        """
        Sets all of the provided tags on all of the provided invitations 
        Sets all of the provided tags on all of the provided invitations 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_invitation_tags_batch(batch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_invitation_tags_batch_with_http_info(batch, **kwargs)
        else:
            (data) = self.put_invitation_tags_batch_with_http_info(batch, **kwargs)
            return data

    def put_invitation_tags_batch_with_http_info(self, batch, **kwargs):
        """
        Sets all of the provided tags on all of the provided invitations 
        Sets all of the provided tags on all of the provided invitations 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_invitation_tags_batch_with_http_info(batch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BatchTagsSchema batch: Object representing an array of ids to apply an array of tags to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_invitation_tags_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch' is set
        if ('batch' not in params) or (params['batch'] is None):
            raise ValueError("Missing the required parameter `batch` when calling `put_invitation_tags_batch`")


        collection_formats = {}

        resource_path = '/invitations/tags'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch' in params:
            body_params = params['batch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_private_invitation(self, invitation_id, invitation_update_schema, **kwargs):
        """
        Update attributes of this invitation.
        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_private_invitation(invitation_id, invitation_update_schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param PrivateInvitationSchema invitation_update_schema: A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)
        else:
            (data) = self.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)
            return data

    def update_private_invitation_with_http_info(self, invitation_id, invitation_update_schema, **kwargs):
        """
        Update attributes of this invitation.
        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_private_invitation_with_http_info(invitation_id, invitation_update_schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param PrivateInvitationSchema invitation_update_schema: A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PrivateInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'invitation_update_schema']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_private_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `update_private_invitation`")
        # verify the required parameter 'invitation_update_schema' is set
        if ('invitation_update_schema' not in params) or (params['invitation_update_schema'] is None):
            raise ValueError("Missing the required parameter `invitation_update_schema` when calling `update_private_invitation`")


        collection_formats = {}

        resource_path = '/invitations/private/{invitationId}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation_update_schema' in params:
            body_params = params['invitation_update_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrivateInvitationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_public_invitation(self, invitation_id, invitation_update_schema, **kwargs):
        """
        Update attributes of this invitation.
        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_public_invitation(invitation_id, invitation_update_schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param PublicInvitationSchema invitation_update_schema: A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)
        else:
            (data) = self.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, **kwargs)
            return data

    def update_public_invitation_with_http_info(self, invitation_id, invitation_update_schema, **kwargs):
        """
        Update attributes of this invitation.
        Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_public_invitation_with_http_info(invitation_id, invitation_update_schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: invitation id (required)
        :param PublicInvitationSchema invitation_update_schema: A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
        :return: PublicInvitationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'invitation_update_schema']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_public_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `update_public_invitation`")
        # verify the required parameter 'invitation_update_schema' is set
        if ('invitation_update_schema' not in params) or (params['invitation_update_schema'] is None):
            raise ValueError("Missing the required parameter `invitation_update_schema` when calling `update_public_invitation`")


        collection_formats = {}

        resource_path = '/invitations/public/{invitationId}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitationId'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invitation_update_schema' in params:
            body_params = params['invitation_update_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PublicInvitationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
