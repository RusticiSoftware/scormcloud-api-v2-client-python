# coding: utf-8

"""
    SCORM Cloud Rest API

    REST API used for SCORM Cloud integrations.

    OpenAPI spec version: 2.0
    Contact: systems@rusticisoftware.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApplicationManagementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_application(self, application_name, **kwargs):
        """
        A call to this method will create a new application and return a basic object describing it.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_application(application_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationSchema application_name: (required)
        :return: ApplicationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_application_with_http_info(application_name, **kwargs)
        else:
            (data) = self.create_application_with_http_info(application_name, **kwargs)
            return data

    def create_application_with_http_info(self, application_name, **kwargs):
        """
        A call to this method will create a new application and return a basic object describing it.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_application_with_http_info(application_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationSchema application_name: (required)
        :return: ApplicationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_name' is set
        if ('application_name' not in params) or (params['application_name'] is None):
            raise ValueError("Missing the required parameter `application_name` when calling `create_application`")


        collection_formats = {}

        resource_path = '/appManagement/applications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_name' in params:
            body_params = params['application_name']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_credential(self, child_app_id, credential_request, **kwargs):
        """
        Create a new credential (aka secret key) for use with the `childAppId`. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credential(child_app_id, credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param CredentialRequestSchema credential_request: (required)
        :return: CredentialCreatedSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_credential_with_http_info(child_app_id, credential_request, **kwargs)
        else:
            (data) = self.create_credential_with_http_info(child_app_id, credential_request, **kwargs)
            return data

    def create_credential_with_http_info(self, child_app_id, credential_request, **kwargs):
        """
        Create a new credential (aka secret key) for use with the `childAppId`. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credential_with_http_info(child_app_id, credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param CredentialRequestSchema credential_request: (required)
        :return: CredentialCreatedSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_app_id', 'credential_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_app_id' is set
        if ('child_app_id' not in params) or (params['child_app_id'] is None):
            raise ValueError("Missing the required parameter `child_app_id` when calling `create_credential`")
        # verify the required parameter 'credential_request' is set
        if ('credential_request' not in params) or (params['credential_request'] is None):
            raise ValueError("Missing the required parameter `credential_request` when calling `create_credential`")


        collection_formats = {}

        resource_path = '/appManagement/{childAppId}/credentials'.replace('{format}', 'json')
        path_params = {}
        if 'child_app_id' in params:
            path_params['childAppId'] = params['child_app_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credential_request' in params:
            body_params = params['credential_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CredentialCreatedSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_token(self, token_request, **kwargs):
        """
        Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_token(token_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TokenRequestSchema token_request: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_token_with_http_info(token_request, **kwargs)
        else:
            (data) = self.create_token_with_http_info(token_request, **kwargs)
            return data

    def create_token_with_http_info(self, token_request, **kwargs):
        """
        Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_token_with_http_info(token_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TokenRequestSchema token_request: (required)
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_request' is set
        if ('token_request' not in params) or (params['token_request'] is None):
            raise ValueError("Missing the required parameter `token_request` when calling `create_token`")


        collection_formats = {}

        resource_path = '/appManagement/token'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'token_request' in params:
            body_params = params['token_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StringResultSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_application(self, child_app_id, **kwargs):
        """
        Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application(child_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_application_with_http_info(child_app_id, **kwargs)
        else:
            (data) = self.delete_application_with_http_info(child_app_id, **kwargs)
            return data

    def delete_application_with_http_info(self, child_app_id, **kwargs):
        """
        Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application_with_http_info(child_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_app_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_app_id' is set
        if ('child_app_id' not in params) or (params['child_app_id'] is None):
            raise ValueError("Missing the required parameter `child_app_id` when calling `delete_application`")


        collection_formats = {}

        resource_path = '/appManagement/applications/{childAppId}'.replace('{format}', 'json')
        path_params = {}
        if 'child_app_id' in params:
            path_params['childAppId'] = params['child_app_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_application_configuration_setting(self, setting_id, **kwargs):
        """
        Clears the `settingId` value for this level 
        Clears the setting value at this level.  This is effectively reverting the setting to the system level default. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application_configuration_setting(setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str setting_id: (required)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_application_configuration_setting_with_http_info(setting_id, **kwargs)
        else:
            (data) = self.delete_application_configuration_setting_with_http_info(setting_id, **kwargs)
            return data

    def delete_application_configuration_setting_with_http_info(self, setting_id, **kwargs):
        """
        Clears the `settingId` value for this level 
        Clears the setting value at this level.  This is effectively reverting the setting to the system level default. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_application_configuration_setting_with_http_info(setting_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str setting_id: (required)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_id', 'learning_standard', 'single_sco']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params) or (params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_application_configuration_setting`")


        collection_formats = {}

        resource_path = '/appManagement/configuration/{settingId}'.replace('{format}', 'json')
        path_params = {}
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']

        query_params = {}
        if 'learning_standard' in params:
            query_params['learningStandard'] = params['learning_standard']
        if 'single_sco' in params:
            query_params['singleSco'] = params['single_sco']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_credential(self, child_app_id, credential_id, **kwargs):
        """
        Delete `credentialId` from the system.  Note: if an application's last secret key is deleted it will not be able to use the SCORM Cloud api until another key is granted to it via `CreateCredential`.  Removing the last secret key may also disable some priviledges in the website. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_credential(child_app_id, credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param str credential_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_credential_with_http_info(child_app_id, credential_id, **kwargs)
        else:
            (data) = self.delete_credential_with_http_info(child_app_id, credential_id, **kwargs)
            return data

    def delete_credential_with_http_info(self, child_app_id, credential_id, **kwargs):
        """
        Delete `credentialId` from the system.  Note: if an application's last secret key is deleted it will not be able to use the SCORM Cloud api until another key is granted to it via `CreateCredential`.  Removing the last secret key may also disable some priviledges in the website. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_credential_with_http_info(child_app_id, credential_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param str credential_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_app_id', 'credential_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_app_id' is set
        if ('child_app_id' not in params) or (params['child_app_id'] is None):
            raise ValueError("Missing the required parameter `child_app_id` when calling `delete_credential`")
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params) or (params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `delete_credential`")


        collection_formats = {}

        resource_path = '/appManagement/{childAppId}/credentials/{credentialId}'.replace('{format}', 'json')
        path_params = {}
        if 'child_app_id' in params:
            path_params['childAppId'] = params['child_app_id']
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_configuration(self, **kwargs):
        """
        Returns all configuration settings for this level. These settings will only affect items within this application which do not have that setting themselves.  >Note -----  >This resource actually represents 2 distinct levels which are:  >- ALL content in an application.  This is achieved by leaving `learningStandard` and `singleSco`   as `null`.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. - Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.  Note: both `learningStandard`   and `singleSco` must be provided, as this level is considered to be identified by those items   joined. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_configuration(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_configuration_with_http_info(**kwargs)
        else:
            (data) = self.get_application_configuration_with_http_info(**kwargs)
            return data

    def get_application_configuration_with_http_info(self, **kwargs):
        """
        Returns all configuration settings for this level. These settings will only affect items within this application which do not have that setting themselves.  >Note -----  >This resource actually represents 2 distinct levels which are:  >- ALL content in an application.  This is achieved by leaving `learningStandard` and `singleSco`   as `null`.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. - Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.  Note: both `learningStandard`   and `singleSco` must be provided, as this level is considered to be identified by those items   joined. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_configuration_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :param bool include_metadata:
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['learning_standard', 'single_sco', 'include_metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_configuration" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/appManagement/configuration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'learning_standard' in params:
            query_params['learningStandard'] = params['learning_standard']
        if 'single_sco' in params:
            query_params['singleSco'] = params['single_sco']
        if 'include_metadata' in params:
            query_params['includeMetadata'] = params['include_metadata']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SettingListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_application_list(self, **kwargs):
        """
        Get a list of all applications for the realm.
        Get list of all applications in this realm.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApplicationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_application_list_with_http_info(**kwargs)
        else:
            (data) = self.get_application_list_with_http_info(**kwargs)
            return data

    def get_application_list_with_http_info(self, **kwargs):
        """
        Get a list of all applications for the realm.
        Get list of all applications in this realm.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_application_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApplicationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/appManagement/applications'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApplicationListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_credentials(self, child_app_id, **kwargs):
        """
        Retrieve a list of all credentials (aka secret keys) belonging to `childAppId` and their statuses. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credentials(child_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :return: CredentialListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_credentials_with_http_info(child_app_id, **kwargs)
        else:
            (data) = self.get_credentials_with_http_info(child_app_id, **kwargs)
            return data

    def get_credentials_with_http_info(self, child_app_id, **kwargs):
        """
        Retrieve a list of all credentials (aka secret keys) belonging to `childAppId` and their statuses. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_credentials_with_http_info(child_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :return: CredentialListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_app_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_app_id' is set
        if ('child_app_id' not in params) or (params['child_app_id'] is None):
            raise ValueError("Missing the required parameter `child_app_id` when calling `get_credentials`")


        collection_formats = {}

        resource_path = '/appManagement/{childAppId}/credentials'.replace('{format}', 'json')
        path_params = {}
        if 'child_app_id' in params:
            path_params['childAppId'] = params['child_app_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CredentialListSchema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_application_configuration(self, configuration_settings, **kwargs):
        """
        Set configuration settings for the application level.  These settings will only affect items within the application which do not have their own configuration set.  This can be used to effectively set application level defaults. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_application_configuration(configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsPostSchema configuration_settings: (required)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_application_configuration_with_http_info(configuration_settings, **kwargs)
        else:
            (data) = self.set_application_configuration_with_http_info(configuration_settings, **kwargs)
            return data

    def set_application_configuration_with_http_info(self, configuration_settings, **kwargs):
        """
        Set configuration settings for the application level.  These settings will only affect items within the application which do not have their own configuration set.  This can be used to effectively set application level defaults. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_application_configuration_with_http_info(configuration_settings, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SettingsPostSchema configuration_settings: (required)
        :param str learning_standard: If specified, the request will be scoped to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_settings', 'learning_standard', 'single_sco']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_application_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_settings' is set
        if ('configuration_settings' not in params) or (params['configuration_settings'] is None):
            raise ValueError("Missing the required parameter `configuration_settings` when calling `set_application_configuration`")


        collection_formats = {}

        resource_path = '/appManagement/configuration'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'learning_standard' in params:
            query_params['learningStandard'] = params['learning_standard']
        if 'single_sco' in params:
            query_params['singleSco'] = params['single_sco']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration_settings' in params:
            body_params = params['configuration_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_NORMAL', 'OAUTH']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_credential(self, child_app_id, credential_id, credential_update, **kwargs):
        """
        Update the name or status associated with `credentialId`.  If the status is updated to disabled, the credential will no longer be valid for authorization through the API.  If the last (or only) key for an application is disabled it may affect some website priviledges 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_credential(child_app_id, credential_id, credential_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param str credential_id: (required)
        :param CredentialRequestSchema credential_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_credential_with_http_info(child_app_id, credential_id, credential_update, **kwargs)
        else:
            (data) = self.update_credential_with_http_info(child_app_id, credential_id, credential_update, **kwargs)
            return data

    def update_credential_with_http_info(self, child_app_id, credential_id, credential_update, **kwargs):
        """
        Update the name or status associated with `credentialId`.  If the status is updated to disabled, the credential will no longer be valid for authorization through the API.  If the last (or only) key for an application is disabled it may affect some website priviledges 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_credential_with_http_info(child_app_id, credential_id, credential_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str child_app_id: (required)
        :param str credential_id: (required)
        :param CredentialRequestSchema credential_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_app_id', 'credential_id', 'credential_update']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_app_id' is set
        if ('child_app_id' not in params) or (params['child_app_id'] is None):
            raise ValueError("Missing the required parameter `child_app_id` when calling `update_credential`")
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params) or (params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `update_credential`")
        # verify the required parameter 'credential_update' is set
        if ('credential_update' not in params) or (params['credential_update'] is None):
            raise ValueError("Missing the required parameter `credential_update` when calling `update_credential`")


        collection_formats = {}

        resource_path = '/appManagement/{childAppId}/credentials/{credentialId}'.replace('{format}', 'json')
        path_params = {}
        if 'child_app_id' in params:
            path_params['childAppId'] = params['child_app_id']
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credential_update' in params:
            body_params = params['credential_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APP_MANAGEMENT', 'OAUTH']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
